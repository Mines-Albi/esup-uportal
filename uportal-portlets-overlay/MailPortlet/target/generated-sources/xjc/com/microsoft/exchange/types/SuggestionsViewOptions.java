//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.20 at 01:37:20 PM CEST 
//


package com.microsoft.exchange.types;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SuggestionsViewOptionsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SuggestionsViewOptionsType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="GoodThreshold" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="MaximumResultsByDay" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="MaximumNonWorkHourResultsByDay" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="MeetingDurationInMinutes" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="MinimumSuggestionQuality" type="{http://schemas.microsoft.com/exchange/services/2006/types}SuggestionQuality" minOccurs="0"/>
 *         &lt;element name="DetailedSuggestionsWindow" type="{http://schemas.microsoft.com/exchange/services/2006/types}Duration"/>
 *         &lt;element name="CurrentMeetingTime" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *         &lt;element name="GlobalObjectId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SuggestionsViewOptionsType", propOrder = {
    "goodThreshold",
    "maximumResultsByDay",
    "maximumNonWorkHourResultsByDay",
    "meetingDurationInMinutes",
    "minimumSuggestionQuality",
    "detailedSuggestionsWindow",
    "currentMeetingTime",
    "globalObjectId"
})
@XmlRootElement(name = "SuggestionsViewOptions")
public class SuggestionsViewOptions
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "GoodThreshold")
    protected Integer goodThreshold;
    @XmlElement(name = "MaximumResultsByDay")
    protected Integer maximumResultsByDay;
    @XmlElement(name = "MaximumNonWorkHourResultsByDay")
    protected Integer maximumNonWorkHourResultsByDay;
    @XmlElement(name = "MeetingDurationInMinutes")
    protected Integer meetingDurationInMinutes;
    @XmlElement(name = "MinimumSuggestionQuality")
    protected SuggestionQuality minimumSuggestionQuality;
    @XmlElement(name = "DetailedSuggestionsWindow", required = true)
    protected Duration detailedSuggestionsWindow;
    @XmlElement(name = "CurrentMeetingTime")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar currentMeetingTime;
    @XmlElement(name = "GlobalObjectId")
    protected String globalObjectId;

    /**
     * Gets the value of the goodThreshold property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getGoodThreshold() {
        return goodThreshold;
    }

    /**
     * Sets the value of the goodThreshold property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setGoodThreshold(Integer value) {
        this.goodThreshold = value;
    }

    /**
     * Gets the value of the maximumResultsByDay property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMaximumResultsByDay() {
        return maximumResultsByDay;
    }

    /**
     * Sets the value of the maximumResultsByDay property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMaximumResultsByDay(Integer value) {
        this.maximumResultsByDay = value;
    }

    /**
     * Gets the value of the maximumNonWorkHourResultsByDay property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMaximumNonWorkHourResultsByDay() {
        return maximumNonWorkHourResultsByDay;
    }

    /**
     * Sets the value of the maximumNonWorkHourResultsByDay property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMaximumNonWorkHourResultsByDay(Integer value) {
        this.maximumNonWorkHourResultsByDay = value;
    }

    /**
     * Gets the value of the meetingDurationInMinutes property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMeetingDurationInMinutes() {
        return meetingDurationInMinutes;
    }

    /**
     * Sets the value of the meetingDurationInMinutes property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMeetingDurationInMinutes(Integer value) {
        this.meetingDurationInMinutes = value;
    }

    /**
     * Gets the value of the minimumSuggestionQuality property.
     * 
     * @return
     *     possible object is
     *     {@link SuggestionQuality }
     *     
     */
    public SuggestionQuality getMinimumSuggestionQuality() {
        return minimumSuggestionQuality;
    }

    /**
     * Sets the value of the minimumSuggestionQuality property.
     * 
     * @param value
     *     allowed object is
     *     {@link SuggestionQuality }
     *     
     */
    public void setMinimumSuggestionQuality(SuggestionQuality value) {
        this.minimumSuggestionQuality = value;
    }

    /**
     * Gets the value of the detailedSuggestionsWindow property.
     * 
     * @return
     *     possible object is
     *     {@link Duration }
     *     
     */
    public Duration getDetailedSuggestionsWindow() {
        return detailedSuggestionsWindow;
    }

    /**
     * Sets the value of the detailedSuggestionsWindow property.
     * 
     * @param value
     *     allowed object is
     *     {@link Duration }
     *     
     */
    public void setDetailedSuggestionsWindow(Duration value) {
        this.detailedSuggestionsWindow = value;
    }

    /**
     * Gets the value of the currentMeetingTime property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getCurrentMeetingTime() {
        return currentMeetingTime;
    }

    /**
     * Sets the value of the currentMeetingTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setCurrentMeetingTime(XMLGregorianCalendar value) {
        this.currentMeetingTime = value;
    }

    /**
     * Gets the value of the globalObjectId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getGlobalObjectId() {
        return globalObjectId;
    }

    /**
     * Sets the value of the globalObjectId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setGlobalObjectId(String value) {
        this.globalObjectId = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Integer theGoodThreshold;
            theGoodThreshold = this.getGoodThreshold();
            strategy.appendField(locator, this, "goodThreshold", buffer, theGoodThreshold);
        }
        {
            Integer theMaximumResultsByDay;
            theMaximumResultsByDay = this.getMaximumResultsByDay();
            strategy.appendField(locator, this, "maximumResultsByDay", buffer, theMaximumResultsByDay);
        }
        {
            Integer theMaximumNonWorkHourResultsByDay;
            theMaximumNonWorkHourResultsByDay = this.getMaximumNonWorkHourResultsByDay();
            strategy.appendField(locator, this, "maximumNonWorkHourResultsByDay", buffer, theMaximumNonWorkHourResultsByDay);
        }
        {
            Integer theMeetingDurationInMinutes;
            theMeetingDurationInMinutes = this.getMeetingDurationInMinutes();
            strategy.appendField(locator, this, "meetingDurationInMinutes", buffer, theMeetingDurationInMinutes);
        }
        {
            SuggestionQuality theMinimumSuggestionQuality;
            theMinimumSuggestionQuality = this.getMinimumSuggestionQuality();
            strategy.appendField(locator, this, "minimumSuggestionQuality", buffer, theMinimumSuggestionQuality);
        }
        {
            Duration theDetailedSuggestionsWindow;
            theDetailedSuggestionsWindow = this.getDetailedSuggestionsWindow();
            strategy.appendField(locator, this, "detailedSuggestionsWindow", buffer, theDetailedSuggestionsWindow);
        }
        {
            XMLGregorianCalendar theCurrentMeetingTime;
            theCurrentMeetingTime = this.getCurrentMeetingTime();
            strategy.appendField(locator, this, "currentMeetingTime", buffer, theCurrentMeetingTime);
        }
        {
            String theGlobalObjectId;
            theGlobalObjectId = this.getGlobalObjectId();
            strategy.appendField(locator, this, "globalObjectId", buffer, theGlobalObjectId);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SuggestionsViewOptions)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SuggestionsViewOptions that = ((SuggestionsViewOptions) object);
        {
            Integer lhsGoodThreshold;
            lhsGoodThreshold = this.getGoodThreshold();
            Integer rhsGoodThreshold;
            rhsGoodThreshold = that.getGoodThreshold();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "goodThreshold", lhsGoodThreshold), LocatorUtils.property(thatLocator, "goodThreshold", rhsGoodThreshold), lhsGoodThreshold, rhsGoodThreshold)) {
                return false;
            }
        }
        {
            Integer lhsMaximumResultsByDay;
            lhsMaximumResultsByDay = this.getMaximumResultsByDay();
            Integer rhsMaximumResultsByDay;
            rhsMaximumResultsByDay = that.getMaximumResultsByDay();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maximumResultsByDay", lhsMaximumResultsByDay), LocatorUtils.property(thatLocator, "maximumResultsByDay", rhsMaximumResultsByDay), lhsMaximumResultsByDay, rhsMaximumResultsByDay)) {
                return false;
            }
        }
        {
            Integer lhsMaximumNonWorkHourResultsByDay;
            lhsMaximumNonWorkHourResultsByDay = this.getMaximumNonWorkHourResultsByDay();
            Integer rhsMaximumNonWorkHourResultsByDay;
            rhsMaximumNonWorkHourResultsByDay = that.getMaximumNonWorkHourResultsByDay();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maximumNonWorkHourResultsByDay", lhsMaximumNonWorkHourResultsByDay), LocatorUtils.property(thatLocator, "maximumNonWorkHourResultsByDay", rhsMaximumNonWorkHourResultsByDay), lhsMaximumNonWorkHourResultsByDay, rhsMaximumNonWorkHourResultsByDay)) {
                return false;
            }
        }
        {
            Integer lhsMeetingDurationInMinutes;
            lhsMeetingDurationInMinutes = this.getMeetingDurationInMinutes();
            Integer rhsMeetingDurationInMinutes;
            rhsMeetingDurationInMinutes = that.getMeetingDurationInMinutes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "meetingDurationInMinutes", lhsMeetingDurationInMinutes), LocatorUtils.property(thatLocator, "meetingDurationInMinutes", rhsMeetingDurationInMinutes), lhsMeetingDurationInMinutes, rhsMeetingDurationInMinutes)) {
                return false;
            }
        }
        {
            SuggestionQuality lhsMinimumSuggestionQuality;
            lhsMinimumSuggestionQuality = this.getMinimumSuggestionQuality();
            SuggestionQuality rhsMinimumSuggestionQuality;
            rhsMinimumSuggestionQuality = that.getMinimumSuggestionQuality();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "minimumSuggestionQuality", lhsMinimumSuggestionQuality), LocatorUtils.property(thatLocator, "minimumSuggestionQuality", rhsMinimumSuggestionQuality), lhsMinimumSuggestionQuality, rhsMinimumSuggestionQuality)) {
                return false;
            }
        }
        {
            Duration lhsDetailedSuggestionsWindow;
            lhsDetailedSuggestionsWindow = this.getDetailedSuggestionsWindow();
            Duration rhsDetailedSuggestionsWindow;
            rhsDetailedSuggestionsWindow = that.getDetailedSuggestionsWindow();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "detailedSuggestionsWindow", lhsDetailedSuggestionsWindow), LocatorUtils.property(thatLocator, "detailedSuggestionsWindow", rhsDetailedSuggestionsWindow), lhsDetailedSuggestionsWindow, rhsDetailedSuggestionsWindow)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsCurrentMeetingTime;
            lhsCurrentMeetingTime = this.getCurrentMeetingTime();
            XMLGregorianCalendar rhsCurrentMeetingTime;
            rhsCurrentMeetingTime = that.getCurrentMeetingTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentMeetingTime", lhsCurrentMeetingTime), LocatorUtils.property(thatLocator, "currentMeetingTime", rhsCurrentMeetingTime), lhsCurrentMeetingTime, rhsCurrentMeetingTime)) {
                return false;
            }
        }
        {
            String lhsGlobalObjectId;
            lhsGlobalObjectId = this.getGlobalObjectId();
            String rhsGlobalObjectId;
            rhsGlobalObjectId = that.getGlobalObjectId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "globalObjectId", lhsGlobalObjectId), LocatorUtils.property(thatLocator, "globalObjectId", rhsGlobalObjectId), lhsGlobalObjectId, rhsGlobalObjectId)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Integer theGoodThreshold;
            theGoodThreshold = this.getGoodThreshold();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "goodThreshold", theGoodThreshold), currentHashCode, theGoodThreshold);
        }
        {
            Integer theMaximumResultsByDay;
            theMaximumResultsByDay = this.getMaximumResultsByDay();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maximumResultsByDay", theMaximumResultsByDay), currentHashCode, theMaximumResultsByDay);
        }
        {
            Integer theMaximumNonWorkHourResultsByDay;
            theMaximumNonWorkHourResultsByDay = this.getMaximumNonWorkHourResultsByDay();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maximumNonWorkHourResultsByDay", theMaximumNonWorkHourResultsByDay), currentHashCode, theMaximumNonWorkHourResultsByDay);
        }
        {
            Integer theMeetingDurationInMinutes;
            theMeetingDurationInMinutes = this.getMeetingDurationInMinutes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "meetingDurationInMinutes", theMeetingDurationInMinutes), currentHashCode, theMeetingDurationInMinutes);
        }
        {
            SuggestionQuality theMinimumSuggestionQuality;
            theMinimumSuggestionQuality = this.getMinimumSuggestionQuality();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "minimumSuggestionQuality", theMinimumSuggestionQuality), currentHashCode, theMinimumSuggestionQuality);
        }
        {
            Duration theDetailedSuggestionsWindow;
            theDetailedSuggestionsWindow = this.getDetailedSuggestionsWindow();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "detailedSuggestionsWindow", theDetailedSuggestionsWindow), currentHashCode, theDetailedSuggestionsWindow);
        }
        {
            XMLGregorianCalendar theCurrentMeetingTime;
            theCurrentMeetingTime = this.getCurrentMeetingTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentMeetingTime", theCurrentMeetingTime), currentHashCode, theCurrentMeetingTime);
        }
        {
            String theGlobalObjectId;
            theGlobalObjectId = this.getGlobalObjectId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "globalObjectId", theGlobalObjectId), currentHashCode, theGlobalObjectId);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
