//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.20 at 01:37:20 PM CEST 
//


package com.microsoft.exchange.autodiscover;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ServerVersionInfo complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ServerVersionInfo">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="MajorVersion" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="MinorVersion" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="MajorBuildNumber" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="MinorBuildNumber" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="Version" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ServerVersionInfo", propOrder = {
    "majorVersion",
    "minorVersion",
    "majorBuildNumber",
    "minorBuildNumber",
    "version"
})
public class ServerVersionInfo
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "MajorVersion")
    protected Integer majorVersion;
    @XmlElement(name = "MinorVersion")
    protected Integer minorVersion;
    @XmlElement(name = "MajorBuildNumber")
    protected Integer majorBuildNumber;
    @XmlElement(name = "MinorBuildNumber")
    protected Integer minorBuildNumber;
    @XmlElementRef(name = "Version", namespace = "http://schemas.microsoft.com/exchange/2010/Autodiscover", type = JAXBElement.class)
    protected JAXBElement<String> version;

    /**
     * Gets the value of the majorVersion property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMajorVersion() {
        return majorVersion;
    }

    /**
     * Sets the value of the majorVersion property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMajorVersion(Integer value) {
        this.majorVersion = value;
    }

    /**
     * Gets the value of the minorVersion property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMinorVersion() {
        return minorVersion;
    }

    /**
     * Sets the value of the minorVersion property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMinorVersion(Integer value) {
        this.minorVersion = value;
    }

    /**
     * Gets the value of the majorBuildNumber property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMajorBuildNumber() {
        return majorBuildNumber;
    }

    /**
     * Sets the value of the majorBuildNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMajorBuildNumber(Integer value) {
        this.majorBuildNumber = value;
    }

    /**
     * Gets the value of the minorBuildNumber property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getMinorBuildNumber() {
        return minorBuildNumber;
    }

    /**
     * Sets the value of the minorBuildNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMinorBuildNumber(Integer value) {
        this.minorBuildNumber = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link JAXBElement }{@code <}{@link String }{@code >}
     *     
     */
    public JAXBElement<String> getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link JAXBElement }{@code <}{@link String }{@code >}
     *     
     */
    public void setVersion(JAXBElement<String> value) {
        this.version = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Integer theMajorVersion;
            theMajorVersion = this.getMajorVersion();
            strategy.appendField(locator, this, "majorVersion", buffer, theMajorVersion);
        }
        {
            Integer theMinorVersion;
            theMinorVersion = this.getMinorVersion();
            strategy.appendField(locator, this, "minorVersion", buffer, theMinorVersion);
        }
        {
            Integer theMajorBuildNumber;
            theMajorBuildNumber = this.getMajorBuildNumber();
            strategy.appendField(locator, this, "majorBuildNumber", buffer, theMajorBuildNumber);
        }
        {
            Integer theMinorBuildNumber;
            theMinorBuildNumber = this.getMinorBuildNumber();
            strategy.appendField(locator, this, "minorBuildNumber", buffer, theMinorBuildNumber);
        }
        {
            JAXBElement<String> theVersion;
            theVersion = this.getVersion();
            strategy.appendField(locator, this, "version", buffer, theVersion);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ServerVersionInfo)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ServerVersionInfo that = ((ServerVersionInfo) object);
        {
            Integer lhsMajorVersion;
            lhsMajorVersion = this.getMajorVersion();
            Integer rhsMajorVersion;
            rhsMajorVersion = that.getMajorVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "majorVersion", lhsMajorVersion), LocatorUtils.property(thatLocator, "majorVersion", rhsMajorVersion), lhsMajorVersion, rhsMajorVersion)) {
                return false;
            }
        }
        {
            Integer lhsMinorVersion;
            lhsMinorVersion = this.getMinorVersion();
            Integer rhsMinorVersion;
            rhsMinorVersion = that.getMinorVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "minorVersion", lhsMinorVersion), LocatorUtils.property(thatLocator, "minorVersion", rhsMinorVersion), lhsMinorVersion, rhsMinorVersion)) {
                return false;
            }
        }
        {
            Integer lhsMajorBuildNumber;
            lhsMajorBuildNumber = this.getMajorBuildNumber();
            Integer rhsMajorBuildNumber;
            rhsMajorBuildNumber = that.getMajorBuildNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "majorBuildNumber", lhsMajorBuildNumber), LocatorUtils.property(thatLocator, "majorBuildNumber", rhsMajorBuildNumber), lhsMajorBuildNumber, rhsMajorBuildNumber)) {
                return false;
            }
        }
        {
            Integer lhsMinorBuildNumber;
            lhsMinorBuildNumber = this.getMinorBuildNumber();
            Integer rhsMinorBuildNumber;
            rhsMinorBuildNumber = that.getMinorBuildNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "minorBuildNumber", lhsMinorBuildNumber), LocatorUtils.property(thatLocator, "minorBuildNumber", rhsMinorBuildNumber), lhsMinorBuildNumber, rhsMinorBuildNumber)) {
                return false;
            }
        }
        {
            JAXBElement<String> lhsVersion;
            lhsVersion = this.getVersion();
            JAXBElement<String> rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Integer theMajorVersion;
            theMajorVersion = this.getMajorVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "majorVersion", theMajorVersion), currentHashCode, theMajorVersion);
        }
        {
            Integer theMinorVersion;
            theMinorVersion = this.getMinorVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "minorVersion", theMinorVersion), currentHashCode, theMinorVersion);
        }
        {
            Integer theMajorBuildNumber;
            theMajorBuildNumber = this.getMajorBuildNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "majorBuildNumber", theMajorBuildNumber), currentHashCode, theMajorBuildNumber);
        }
        {
            Integer theMinorBuildNumber;
            theMinorBuildNumber = this.getMinorBuildNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "minorBuildNumber", theMinorBuildNumber), currentHashCode, theMinorBuildNumber);
        }
        {
            JAXBElement<String> theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
