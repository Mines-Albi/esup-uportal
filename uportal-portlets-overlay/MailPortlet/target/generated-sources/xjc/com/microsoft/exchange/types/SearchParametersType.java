//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.18 at 02:30:12 PM CEST 
//


package com.microsoft.exchange.types;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SearchParametersType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SearchParametersType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Restriction" type="{http://schemas.microsoft.com/exchange/services/2006/types}RestrictionType"/>
 *         &lt;element name="BaseFolderIds" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfBaseFolderIdsType"/>
 *       &lt;/sequence>
 *       &lt;attribute name="Traversal" type="{http://schemas.microsoft.com/exchange/services/2006/types}SearchFolderTraversalType" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SearchParametersType", propOrder = {
    "restriction",
    "baseFolderIds"
})
public class SearchParametersType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "Restriction", required = true)
    protected RestrictionType restriction;
    @XmlElement(name = "BaseFolderIds", required = true)
    protected NonEmptyArrayOfBaseFolderIdsType baseFolderIds;
    @XmlAttribute(name = "Traversal")
    protected SearchFolderTraversalType traversal;

    /**
     * Gets the value of the restriction property.
     * 
     * @return
     *     possible object is
     *     {@link RestrictionType }
     *     
     */
    public RestrictionType getRestriction() {
        return restriction;
    }

    /**
     * Sets the value of the restriction property.
     * 
     * @param value
     *     allowed object is
     *     {@link RestrictionType }
     *     
     */
    public void setRestriction(RestrictionType value) {
        this.restriction = value;
    }

    /**
     * Gets the value of the baseFolderIds property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfBaseFolderIdsType }
     *     
     */
    public NonEmptyArrayOfBaseFolderIdsType getBaseFolderIds() {
        return baseFolderIds;
    }

    /**
     * Sets the value of the baseFolderIds property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfBaseFolderIdsType }
     *     
     */
    public void setBaseFolderIds(NonEmptyArrayOfBaseFolderIdsType value) {
        this.baseFolderIds = value;
    }

    /**
     * Gets the value of the traversal property.
     * 
     * @return
     *     possible object is
     *     {@link SearchFolderTraversalType }
     *     
     */
    public SearchFolderTraversalType getTraversal() {
        return traversal;
    }

    /**
     * Sets the value of the traversal property.
     * 
     * @param value
     *     allowed object is
     *     {@link SearchFolderTraversalType }
     *     
     */
    public void setTraversal(SearchFolderTraversalType value) {
        this.traversal = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            RestrictionType theRestriction;
            theRestriction = this.getRestriction();
            strategy.appendField(locator, this, "restriction", buffer, theRestriction);
        }
        {
            NonEmptyArrayOfBaseFolderIdsType theBaseFolderIds;
            theBaseFolderIds = this.getBaseFolderIds();
            strategy.appendField(locator, this, "baseFolderIds", buffer, theBaseFolderIds);
        }
        {
            SearchFolderTraversalType theTraversal;
            theTraversal = this.getTraversal();
            strategy.appendField(locator, this, "traversal", buffer, theTraversal);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SearchParametersType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SearchParametersType that = ((SearchParametersType) object);
        {
            RestrictionType lhsRestriction;
            lhsRestriction = this.getRestriction();
            RestrictionType rhsRestriction;
            rhsRestriction = that.getRestriction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "restriction", lhsRestriction), LocatorUtils.property(thatLocator, "restriction", rhsRestriction), lhsRestriction, rhsRestriction)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfBaseFolderIdsType lhsBaseFolderIds;
            lhsBaseFolderIds = this.getBaseFolderIds();
            NonEmptyArrayOfBaseFolderIdsType rhsBaseFolderIds;
            rhsBaseFolderIds = that.getBaseFolderIds();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "baseFolderIds", lhsBaseFolderIds), LocatorUtils.property(thatLocator, "baseFolderIds", rhsBaseFolderIds), lhsBaseFolderIds, rhsBaseFolderIds)) {
                return false;
            }
        }
        {
            SearchFolderTraversalType lhsTraversal;
            lhsTraversal = this.getTraversal();
            SearchFolderTraversalType rhsTraversal;
            rhsTraversal = that.getTraversal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "traversal", lhsTraversal), LocatorUtils.property(thatLocator, "traversal", rhsTraversal), lhsTraversal, rhsTraversal)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            RestrictionType theRestriction;
            theRestriction = this.getRestriction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "restriction", theRestriction), currentHashCode, theRestriction);
        }
        {
            NonEmptyArrayOfBaseFolderIdsType theBaseFolderIds;
            theBaseFolderIds = this.getBaseFolderIds();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "baseFolderIds", theBaseFolderIds), currentHashCode, theBaseFolderIds);
        }
        {
            SearchFolderTraversalType theTraversal;
            theTraversal = this.getTraversal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "traversal", theTraversal), currentHashCode, theTraversal);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
