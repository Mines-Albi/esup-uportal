//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.18 at 02:30:12 PM CEST 
//


package com.microsoft.exchange.messages;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.microsoft.exchange.types.NonEmptyArrayOfBaseFolderIdsType;
import com.microsoft.exchange.types.ResolveNamesSearchScopeType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ResolveNamesType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ResolveNamesType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/exchange/services/2006/messages}BaseRequestType">
 *       &lt;sequence>
 *         &lt;element name="ParentFolderIds" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfBaseFolderIdsType" minOccurs="0"/>
 *         &lt;element name="UnresolvedEntry" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyStringType"/>
 *       &lt;/sequence>
 *       &lt;attribute name="ReturnFullContactData" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="SearchScope" type="{http://schemas.microsoft.com/exchange/services/2006/types}ResolveNamesSearchScopeType" default="ActiveDirectoryContacts" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ResolveNamesType", propOrder = {
    "parentFolderIds",
    "unresolvedEntry"
})
@XmlRootElement(name = "ResolveNames")
public class ResolveNames
    extends BaseRequestType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "ParentFolderIds")
    protected NonEmptyArrayOfBaseFolderIdsType parentFolderIds;
    @XmlElement(name = "UnresolvedEntry", required = true)
    protected String unresolvedEntry;
    @XmlAttribute(name = "ReturnFullContactData", required = true)
    protected boolean returnFullContactData;
    @XmlAttribute(name = "SearchScope")
    protected ResolveNamesSearchScopeType searchScope;

    /**
     * Gets the value of the parentFolderIds property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfBaseFolderIdsType }
     *     
     */
    public NonEmptyArrayOfBaseFolderIdsType getParentFolderIds() {
        return parentFolderIds;
    }

    /**
     * Sets the value of the parentFolderIds property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfBaseFolderIdsType }
     *     
     */
    public void setParentFolderIds(NonEmptyArrayOfBaseFolderIdsType value) {
        this.parentFolderIds = value;
    }

    /**
     * Gets the value of the unresolvedEntry property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUnresolvedEntry() {
        return unresolvedEntry;
    }

    /**
     * Sets the value of the unresolvedEntry property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUnresolvedEntry(String value) {
        this.unresolvedEntry = value;
    }

    /**
     * Gets the value of the returnFullContactData property.
     * 
     */
    public boolean isReturnFullContactData() {
        return returnFullContactData;
    }

    /**
     * Sets the value of the returnFullContactData property.
     * 
     */
    public void setReturnFullContactData(boolean value) {
        this.returnFullContactData = value;
    }

    /**
     * Gets the value of the searchScope property.
     * 
     * @return
     *     possible object is
     *     {@link ResolveNamesSearchScopeType }
     *     
     */
    public ResolveNamesSearchScopeType getSearchScope() {
        if (searchScope == null) {
            return ResolveNamesSearchScopeType.ACTIVE_DIRECTORY_CONTACTS;
        } else {
            return searchScope;
        }
    }

    /**
     * Sets the value of the searchScope property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResolveNamesSearchScopeType }
     *     
     */
    public void setSearchScope(ResolveNamesSearchScopeType value) {
        this.searchScope = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            NonEmptyArrayOfBaseFolderIdsType theParentFolderIds;
            theParentFolderIds = this.getParentFolderIds();
            strategy.appendField(locator, this, "parentFolderIds", buffer, theParentFolderIds);
        }
        {
            String theUnresolvedEntry;
            theUnresolvedEntry = this.getUnresolvedEntry();
            strategy.appendField(locator, this, "unresolvedEntry", buffer, theUnresolvedEntry);
        }
        {
            boolean theReturnFullContactData;
            theReturnFullContactData = this.isReturnFullContactData();
            strategy.appendField(locator, this, "returnFullContactData", buffer, theReturnFullContactData);
        }
        {
            ResolveNamesSearchScopeType theSearchScope;
            theSearchScope = this.getSearchScope();
            strategy.appendField(locator, this, "searchScope", buffer, theSearchScope);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ResolveNames)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ResolveNames that = ((ResolveNames) object);
        {
            NonEmptyArrayOfBaseFolderIdsType lhsParentFolderIds;
            lhsParentFolderIds = this.getParentFolderIds();
            NonEmptyArrayOfBaseFolderIdsType rhsParentFolderIds;
            rhsParentFolderIds = that.getParentFolderIds();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "parentFolderIds", lhsParentFolderIds), LocatorUtils.property(thatLocator, "parentFolderIds", rhsParentFolderIds), lhsParentFolderIds, rhsParentFolderIds)) {
                return false;
            }
        }
        {
            String lhsUnresolvedEntry;
            lhsUnresolvedEntry = this.getUnresolvedEntry();
            String rhsUnresolvedEntry;
            rhsUnresolvedEntry = that.getUnresolvedEntry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "unresolvedEntry", lhsUnresolvedEntry), LocatorUtils.property(thatLocator, "unresolvedEntry", rhsUnresolvedEntry), lhsUnresolvedEntry, rhsUnresolvedEntry)) {
                return false;
            }
        }
        {
            boolean lhsReturnFullContactData;
            lhsReturnFullContactData = this.isReturnFullContactData();
            boolean rhsReturnFullContactData;
            rhsReturnFullContactData = that.isReturnFullContactData();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "returnFullContactData", lhsReturnFullContactData), LocatorUtils.property(thatLocator, "returnFullContactData", rhsReturnFullContactData), lhsReturnFullContactData, rhsReturnFullContactData)) {
                return false;
            }
        }
        {
            ResolveNamesSearchScopeType lhsSearchScope;
            lhsSearchScope = this.getSearchScope();
            ResolveNamesSearchScopeType rhsSearchScope;
            rhsSearchScope = that.getSearchScope();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "searchScope", lhsSearchScope), LocatorUtils.property(thatLocator, "searchScope", rhsSearchScope), lhsSearchScope, rhsSearchScope)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            NonEmptyArrayOfBaseFolderIdsType theParentFolderIds;
            theParentFolderIds = this.getParentFolderIds();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "parentFolderIds", theParentFolderIds), currentHashCode, theParentFolderIds);
        }
        {
            String theUnresolvedEntry;
            theUnresolvedEntry = this.getUnresolvedEntry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "unresolvedEntry", theUnresolvedEntry), currentHashCode, theUnresolvedEntry);
        }
        {
            boolean theReturnFullContactData;
            theReturnFullContactData = this.isReturnFullContactData();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "returnFullContactData", theReturnFullContactData), currentHashCode, theReturnFullContactData);
        }
        {
            ResolveNamesSearchScopeType theSearchScope;
            theSearchScope = this.getSearchScope();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "searchScope", theSearchScope), currentHashCode, theSearchScope);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
