//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.18 at 02:30:12 PM CEST 
//


package com.microsoft.exchange.types;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MeetingMessageType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MeetingMessageType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/exchange/services/2006/types}MessageType">
 *       &lt;sequence>
 *         &lt;element name="AssociatedCalendarItemId" type="{http://schemas.microsoft.com/exchange/services/2006/types}ItemIdType" minOccurs="0"/>
 *         &lt;element name="IsDelegated" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="IsOutOfDate" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="HasBeenProcessed" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="ResponseType" type="{http://schemas.microsoft.com/exchange/services/2006/types}ResponseTypeType" minOccurs="0"/>
 *         &lt;element name="UID" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="RecurrenceId" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *         &lt;element name="DateTimeStamp" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MeetingMessageType", propOrder = {
    "associatedCalendarItemId",
    "isDelegated",
    "isOutOfDate",
    "hasBeenProcessed",
    "responseType",
    "uid",
    "recurrenceId",
    "dateTimeStamp"
})
@XmlSeeAlso({
    MeetingCancellationMessageType.class,
    MeetingRequestMessageType.class,
    MeetingResponseMessageType.class
})
public class MeetingMessageType
    extends MessageType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "AssociatedCalendarItemId")
    protected ItemIdType associatedCalendarItemId;
    @XmlElement(name = "IsDelegated")
    protected Boolean isDelegated;
    @XmlElement(name = "IsOutOfDate")
    protected Boolean isOutOfDate;
    @XmlElement(name = "HasBeenProcessed")
    protected Boolean hasBeenProcessed;
    @XmlElement(name = "ResponseType")
    protected ResponseTypeType responseType;
    @XmlElement(name = "UID")
    protected String uid;
    @XmlElement(name = "RecurrenceId")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar recurrenceId;
    @XmlElement(name = "DateTimeStamp")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar dateTimeStamp;

    /**
     * Gets the value of the associatedCalendarItemId property.
     * 
     * @return
     *     possible object is
     *     {@link ItemIdType }
     *     
     */
    public ItemIdType getAssociatedCalendarItemId() {
        return associatedCalendarItemId;
    }

    /**
     * Sets the value of the associatedCalendarItemId property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemIdType }
     *     
     */
    public void setAssociatedCalendarItemId(ItemIdType value) {
        this.associatedCalendarItemId = value;
    }

    /**
     * Gets the value of the isDelegated property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsDelegated() {
        return isDelegated;
    }

    /**
     * Sets the value of the isDelegated property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsDelegated(Boolean value) {
        this.isDelegated = value;
    }

    /**
     * Gets the value of the isOutOfDate property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsOutOfDate() {
        return isOutOfDate;
    }

    /**
     * Sets the value of the isOutOfDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsOutOfDate(Boolean value) {
        this.isOutOfDate = value;
    }

    /**
     * Gets the value of the hasBeenProcessed property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isHasBeenProcessed() {
        return hasBeenProcessed;
    }

    /**
     * Sets the value of the hasBeenProcessed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setHasBeenProcessed(Boolean value) {
        this.hasBeenProcessed = value;
    }

    /**
     * Gets the value of the responseType property.
     * 
     * @return
     *     possible object is
     *     {@link ResponseTypeType }
     *     
     */
    public ResponseTypeType getResponseType() {
        return responseType;
    }

    /**
     * Sets the value of the responseType property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResponseTypeType }
     *     
     */
    public void setResponseType(ResponseTypeType value) {
        this.responseType = value;
    }

    /**
     * Gets the value of the uid property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUID() {
        return uid;
    }

    /**
     * Sets the value of the uid property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUID(String value) {
        this.uid = value;
    }

    /**
     * Gets the value of the recurrenceId property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getRecurrenceId() {
        return recurrenceId;
    }

    /**
     * Sets the value of the recurrenceId property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setRecurrenceId(XMLGregorianCalendar value) {
        this.recurrenceId = value;
    }

    /**
     * Gets the value of the dateTimeStamp property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getDateTimeStamp() {
        return dateTimeStamp;
    }

    /**
     * Sets the value of the dateTimeStamp property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setDateTimeStamp(XMLGregorianCalendar value) {
        this.dateTimeStamp = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            ItemIdType theAssociatedCalendarItemId;
            theAssociatedCalendarItemId = this.getAssociatedCalendarItemId();
            strategy.appendField(locator, this, "associatedCalendarItemId", buffer, theAssociatedCalendarItemId);
        }
        {
            Boolean theIsDelegated;
            theIsDelegated = this.isIsDelegated();
            strategy.appendField(locator, this, "isDelegated", buffer, theIsDelegated);
        }
        {
            Boolean theIsOutOfDate;
            theIsOutOfDate = this.isIsOutOfDate();
            strategy.appendField(locator, this, "isOutOfDate", buffer, theIsOutOfDate);
        }
        {
            Boolean theHasBeenProcessed;
            theHasBeenProcessed = this.isHasBeenProcessed();
            strategy.appendField(locator, this, "hasBeenProcessed", buffer, theHasBeenProcessed);
        }
        {
            ResponseTypeType theResponseType;
            theResponseType = this.getResponseType();
            strategy.appendField(locator, this, "responseType", buffer, theResponseType);
        }
        {
            String theUID;
            theUID = this.getUID();
            strategy.appendField(locator, this, "uid", buffer, theUID);
        }
        {
            XMLGregorianCalendar theRecurrenceId;
            theRecurrenceId = this.getRecurrenceId();
            strategy.appendField(locator, this, "recurrenceId", buffer, theRecurrenceId);
        }
        {
            XMLGregorianCalendar theDateTimeStamp;
            theDateTimeStamp = this.getDateTimeStamp();
            strategy.appendField(locator, this, "dateTimeStamp", buffer, theDateTimeStamp);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MeetingMessageType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MeetingMessageType that = ((MeetingMessageType) object);
        {
            ItemIdType lhsAssociatedCalendarItemId;
            lhsAssociatedCalendarItemId = this.getAssociatedCalendarItemId();
            ItemIdType rhsAssociatedCalendarItemId;
            rhsAssociatedCalendarItemId = that.getAssociatedCalendarItemId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "associatedCalendarItemId", lhsAssociatedCalendarItemId), LocatorUtils.property(thatLocator, "associatedCalendarItemId", rhsAssociatedCalendarItemId), lhsAssociatedCalendarItemId, rhsAssociatedCalendarItemId)) {
                return false;
            }
        }
        {
            Boolean lhsIsDelegated;
            lhsIsDelegated = this.isIsDelegated();
            Boolean rhsIsDelegated;
            rhsIsDelegated = that.isIsDelegated();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isDelegated", lhsIsDelegated), LocatorUtils.property(thatLocator, "isDelegated", rhsIsDelegated), lhsIsDelegated, rhsIsDelegated)) {
                return false;
            }
        }
        {
            Boolean lhsIsOutOfDate;
            lhsIsOutOfDate = this.isIsOutOfDate();
            Boolean rhsIsOutOfDate;
            rhsIsOutOfDate = that.isIsOutOfDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isOutOfDate", lhsIsOutOfDate), LocatorUtils.property(thatLocator, "isOutOfDate", rhsIsOutOfDate), lhsIsOutOfDate, rhsIsOutOfDate)) {
                return false;
            }
        }
        {
            Boolean lhsHasBeenProcessed;
            lhsHasBeenProcessed = this.isHasBeenProcessed();
            Boolean rhsHasBeenProcessed;
            rhsHasBeenProcessed = that.isHasBeenProcessed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hasBeenProcessed", lhsHasBeenProcessed), LocatorUtils.property(thatLocator, "hasBeenProcessed", rhsHasBeenProcessed), lhsHasBeenProcessed, rhsHasBeenProcessed)) {
                return false;
            }
        }
        {
            ResponseTypeType lhsResponseType;
            lhsResponseType = this.getResponseType();
            ResponseTypeType rhsResponseType;
            rhsResponseType = that.getResponseType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "responseType", lhsResponseType), LocatorUtils.property(thatLocator, "responseType", rhsResponseType), lhsResponseType, rhsResponseType)) {
                return false;
            }
        }
        {
            String lhsUID;
            lhsUID = this.getUID();
            String rhsUID;
            rhsUID = that.getUID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "uid", lhsUID), LocatorUtils.property(thatLocator, "uid", rhsUID), lhsUID, rhsUID)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsRecurrenceId;
            lhsRecurrenceId = this.getRecurrenceId();
            XMLGregorianCalendar rhsRecurrenceId;
            rhsRecurrenceId = that.getRecurrenceId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recurrenceId", lhsRecurrenceId), LocatorUtils.property(thatLocator, "recurrenceId", rhsRecurrenceId), lhsRecurrenceId, rhsRecurrenceId)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsDateTimeStamp;
            lhsDateTimeStamp = this.getDateTimeStamp();
            XMLGregorianCalendar rhsDateTimeStamp;
            rhsDateTimeStamp = that.getDateTimeStamp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateTimeStamp", lhsDateTimeStamp), LocatorUtils.property(thatLocator, "dateTimeStamp", rhsDateTimeStamp), lhsDateTimeStamp, rhsDateTimeStamp)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            ItemIdType theAssociatedCalendarItemId;
            theAssociatedCalendarItemId = this.getAssociatedCalendarItemId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "associatedCalendarItemId", theAssociatedCalendarItemId), currentHashCode, theAssociatedCalendarItemId);
        }
        {
            Boolean theIsDelegated;
            theIsDelegated = this.isIsDelegated();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isDelegated", theIsDelegated), currentHashCode, theIsDelegated);
        }
        {
            Boolean theIsOutOfDate;
            theIsOutOfDate = this.isIsOutOfDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isOutOfDate", theIsOutOfDate), currentHashCode, theIsOutOfDate);
        }
        {
            Boolean theHasBeenProcessed;
            theHasBeenProcessed = this.isHasBeenProcessed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hasBeenProcessed", theHasBeenProcessed), currentHashCode, theHasBeenProcessed);
        }
        {
            ResponseTypeType theResponseType;
            theResponseType = this.getResponseType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "responseType", theResponseType), currentHashCode, theResponseType);
        }
        {
            String theUID;
            theUID = this.getUID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uid", theUID), currentHashCode, theUID);
        }
        {
            XMLGregorianCalendar theRecurrenceId;
            theRecurrenceId = this.getRecurrenceId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recurrenceId", theRecurrenceId), currentHashCode, theRecurrenceId);
        }
        {
            XMLGregorianCalendar theDateTimeStamp;
            theDateTimeStamp = this.getDateTimeStamp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateTimeStamp", theDateTimeStamp), currentHashCode, theDateTimeStamp);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
