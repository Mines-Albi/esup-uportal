//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.20 at 01:37:20 PM CEST 
//


package com.microsoft.exchange.types;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MailboxData complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MailboxData">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Email" type="{http://schemas.microsoft.com/exchange/services/2006/types}EmailAddress"/>
 *         &lt;element name="AttendeeType" type="{http://schemas.microsoft.com/exchange/services/2006/types}MeetingAttendeeType"/>
 *         &lt;element name="ExcludeConflicts" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MailboxData", propOrder = {
    "email",
    "attendeeType",
    "excludeConflicts"
})
public class MailboxData
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "Email", required = true)
    protected Mailbox email;
    @XmlElement(name = "AttendeeType", required = true)
    protected MeetingAttendeeType attendeeType;
    @XmlElement(name = "ExcludeConflicts")
    protected Boolean excludeConflicts;

    /**
     * Gets the value of the email property.
     * 
     * @return
     *     possible object is
     *     {@link Mailbox }
     *     
     */
    public Mailbox getEmail() {
        return email;
    }

    /**
     * Sets the value of the email property.
     * 
     * @param value
     *     allowed object is
     *     {@link Mailbox }
     *     
     */
    public void setEmail(Mailbox value) {
        this.email = value;
    }

    /**
     * Gets the value of the attendeeType property.
     * 
     * @return
     *     possible object is
     *     {@link MeetingAttendeeType }
     *     
     */
    public MeetingAttendeeType getAttendeeType() {
        return attendeeType;
    }

    /**
     * Sets the value of the attendeeType property.
     * 
     * @param value
     *     allowed object is
     *     {@link MeetingAttendeeType }
     *     
     */
    public void setAttendeeType(MeetingAttendeeType value) {
        this.attendeeType = value;
    }

    /**
     * Gets the value of the excludeConflicts property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isExcludeConflicts() {
        return excludeConflicts;
    }

    /**
     * Sets the value of the excludeConflicts property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setExcludeConflicts(Boolean value) {
        this.excludeConflicts = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Mailbox theEmail;
            theEmail = this.getEmail();
            strategy.appendField(locator, this, "email", buffer, theEmail);
        }
        {
            MeetingAttendeeType theAttendeeType;
            theAttendeeType = this.getAttendeeType();
            strategy.appendField(locator, this, "attendeeType", buffer, theAttendeeType);
        }
        {
            Boolean theExcludeConflicts;
            theExcludeConflicts = this.isExcludeConflicts();
            strategy.appendField(locator, this, "excludeConflicts", buffer, theExcludeConflicts);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MailboxData)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MailboxData that = ((MailboxData) object);
        {
            Mailbox lhsEmail;
            lhsEmail = this.getEmail();
            Mailbox rhsEmail;
            rhsEmail = that.getEmail();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "email", lhsEmail), LocatorUtils.property(thatLocator, "email", rhsEmail), lhsEmail, rhsEmail)) {
                return false;
            }
        }
        {
            MeetingAttendeeType lhsAttendeeType;
            lhsAttendeeType = this.getAttendeeType();
            MeetingAttendeeType rhsAttendeeType;
            rhsAttendeeType = that.getAttendeeType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "attendeeType", lhsAttendeeType), LocatorUtils.property(thatLocator, "attendeeType", rhsAttendeeType), lhsAttendeeType, rhsAttendeeType)) {
                return false;
            }
        }
        {
            Boolean lhsExcludeConflicts;
            lhsExcludeConflicts = this.isExcludeConflicts();
            Boolean rhsExcludeConflicts;
            rhsExcludeConflicts = that.isExcludeConflicts();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "excludeConflicts", lhsExcludeConflicts), LocatorUtils.property(thatLocator, "excludeConflicts", rhsExcludeConflicts), lhsExcludeConflicts, rhsExcludeConflicts)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Mailbox theEmail;
            theEmail = this.getEmail();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "email", theEmail), currentHashCode, theEmail);
        }
        {
            MeetingAttendeeType theAttendeeType;
            theAttendeeType = this.getAttendeeType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "attendeeType", theAttendeeType), currentHashCode, theAttendeeType);
        }
        {
            Boolean theExcludeConflicts;
            theExcludeConflicts = this.isExcludeConflicts();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "excludeConflicts", theExcludeConflicts), currentHashCode, theExcludeConflicts);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
