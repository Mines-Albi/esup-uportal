//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.20 at 01:37:20 PM CEST 
//


package com.microsoft.exchange.messages;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.microsoft.exchange.types.ArrayOfDLExpansionType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ExpandDLResponseMessageType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ExpandDLResponseMessageType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/exchange/services/2006/messages}ResponseMessageType">
 *       &lt;sequence>
 *         &lt;element name="DLExpansion" type="{http://schemas.microsoft.com/exchange/services/2006/types}ArrayOfDLExpansionType" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attGroup ref="{http://schemas.microsoft.com/exchange/services/2006/types}FindResponsePagingAttributes"/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ExpandDLResponseMessageType", propOrder = {
    "dlExpansion"
})
public class ExpandDLResponseMessageType
    extends ResponseMessageType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "DLExpansion")
    protected ArrayOfDLExpansionType dlExpansion;
    @XmlAttribute(name = "IndexedPagingOffset")
    protected Integer indexedPagingOffset;
    @XmlAttribute(name = "NumeratorOffset")
    protected Integer numeratorOffset;
    @XmlAttribute(name = "AbsoluteDenominator")
    protected Integer absoluteDenominator;
    @XmlAttribute(name = "IncludesLastItemInRange")
    protected Boolean includesLastItemInRange;
    @XmlAttribute(name = "TotalItemsInView")
    protected Integer totalItemsInView;

    /**
     * Gets the value of the dlExpansion property.
     * 
     * @return
     *     possible object is
     *     {@link ArrayOfDLExpansionType }
     *     
     */
    public ArrayOfDLExpansionType getDLExpansion() {
        return dlExpansion;
    }

    /**
     * Sets the value of the dlExpansion property.
     * 
     * @param value
     *     allowed object is
     *     {@link ArrayOfDLExpansionType }
     *     
     */
    public void setDLExpansion(ArrayOfDLExpansionType value) {
        this.dlExpansion = value;
    }

    /**
     * Gets the value of the indexedPagingOffset property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getIndexedPagingOffset() {
        return indexedPagingOffset;
    }

    /**
     * Sets the value of the indexedPagingOffset property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setIndexedPagingOffset(Integer value) {
        this.indexedPagingOffset = value;
    }

    /**
     * Gets the value of the numeratorOffset property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getNumeratorOffset() {
        return numeratorOffset;
    }

    /**
     * Sets the value of the numeratorOffset property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setNumeratorOffset(Integer value) {
        this.numeratorOffset = value;
    }

    /**
     * Gets the value of the absoluteDenominator property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getAbsoluteDenominator() {
        return absoluteDenominator;
    }

    /**
     * Sets the value of the absoluteDenominator property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setAbsoluteDenominator(Integer value) {
        this.absoluteDenominator = value;
    }

    /**
     * Gets the value of the includesLastItemInRange property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIncludesLastItemInRange() {
        return includesLastItemInRange;
    }

    /**
     * Sets the value of the includesLastItemInRange property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIncludesLastItemInRange(Boolean value) {
        this.includesLastItemInRange = value;
    }

    /**
     * Gets the value of the totalItemsInView property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getTotalItemsInView() {
        return totalItemsInView;
    }

    /**
     * Sets the value of the totalItemsInView property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setTotalItemsInView(Integer value) {
        this.totalItemsInView = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            ArrayOfDLExpansionType theDLExpansion;
            theDLExpansion = this.getDLExpansion();
            strategy.appendField(locator, this, "dlExpansion", buffer, theDLExpansion);
        }
        {
            Integer theIndexedPagingOffset;
            theIndexedPagingOffset = this.getIndexedPagingOffset();
            strategy.appendField(locator, this, "indexedPagingOffset", buffer, theIndexedPagingOffset);
        }
        {
            Integer theNumeratorOffset;
            theNumeratorOffset = this.getNumeratorOffset();
            strategy.appendField(locator, this, "numeratorOffset", buffer, theNumeratorOffset);
        }
        {
            Integer theAbsoluteDenominator;
            theAbsoluteDenominator = this.getAbsoluteDenominator();
            strategy.appendField(locator, this, "absoluteDenominator", buffer, theAbsoluteDenominator);
        }
        {
            Boolean theIncludesLastItemInRange;
            theIncludesLastItemInRange = this.isIncludesLastItemInRange();
            strategy.appendField(locator, this, "includesLastItemInRange", buffer, theIncludesLastItemInRange);
        }
        {
            Integer theTotalItemsInView;
            theTotalItemsInView = this.getTotalItemsInView();
            strategy.appendField(locator, this, "totalItemsInView", buffer, theTotalItemsInView);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ExpandDLResponseMessageType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ExpandDLResponseMessageType that = ((ExpandDLResponseMessageType) object);
        {
            ArrayOfDLExpansionType lhsDLExpansion;
            lhsDLExpansion = this.getDLExpansion();
            ArrayOfDLExpansionType rhsDLExpansion;
            rhsDLExpansion = that.getDLExpansion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dlExpansion", lhsDLExpansion), LocatorUtils.property(thatLocator, "dlExpansion", rhsDLExpansion), lhsDLExpansion, rhsDLExpansion)) {
                return false;
            }
        }
        {
            Integer lhsIndexedPagingOffset;
            lhsIndexedPagingOffset = this.getIndexedPagingOffset();
            Integer rhsIndexedPagingOffset;
            rhsIndexedPagingOffset = that.getIndexedPagingOffset();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indexedPagingOffset", lhsIndexedPagingOffset), LocatorUtils.property(thatLocator, "indexedPagingOffset", rhsIndexedPagingOffset), lhsIndexedPagingOffset, rhsIndexedPagingOffset)) {
                return false;
            }
        }
        {
            Integer lhsNumeratorOffset;
            lhsNumeratorOffset = this.getNumeratorOffset();
            Integer rhsNumeratorOffset;
            rhsNumeratorOffset = that.getNumeratorOffset();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numeratorOffset", lhsNumeratorOffset), LocatorUtils.property(thatLocator, "numeratorOffset", rhsNumeratorOffset), lhsNumeratorOffset, rhsNumeratorOffset)) {
                return false;
            }
        }
        {
            Integer lhsAbsoluteDenominator;
            lhsAbsoluteDenominator = this.getAbsoluteDenominator();
            Integer rhsAbsoluteDenominator;
            rhsAbsoluteDenominator = that.getAbsoluteDenominator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "absoluteDenominator", lhsAbsoluteDenominator), LocatorUtils.property(thatLocator, "absoluteDenominator", rhsAbsoluteDenominator), lhsAbsoluteDenominator, rhsAbsoluteDenominator)) {
                return false;
            }
        }
        {
            Boolean lhsIncludesLastItemInRange;
            lhsIncludesLastItemInRange = this.isIncludesLastItemInRange();
            Boolean rhsIncludesLastItemInRange;
            rhsIncludesLastItemInRange = that.isIncludesLastItemInRange();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "includesLastItemInRange", lhsIncludesLastItemInRange), LocatorUtils.property(thatLocator, "includesLastItemInRange", rhsIncludesLastItemInRange), lhsIncludesLastItemInRange, rhsIncludesLastItemInRange)) {
                return false;
            }
        }
        {
            Integer lhsTotalItemsInView;
            lhsTotalItemsInView = this.getTotalItemsInView();
            Integer rhsTotalItemsInView;
            rhsTotalItemsInView = that.getTotalItemsInView();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totalItemsInView", lhsTotalItemsInView), LocatorUtils.property(thatLocator, "totalItemsInView", rhsTotalItemsInView), lhsTotalItemsInView, rhsTotalItemsInView)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            ArrayOfDLExpansionType theDLExpansion;
            theDLExpansion = this.getDLExpansion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dlExpansion", theDLExpansion), currentHashCode, theDLExpansion);
        }
        {
            Integer theIndexedPagingOffset;
            theIndexedPagingOffset = this.getIndexedPagingOffset();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indexedPagingOffset", theIndexedPagingOffset), currentHashCode, theIndexedPagingOffset);
        }
        {
            Integer theNumeratorOffset;
            theNumeratorOffset = this.getNumeratorOffset();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numeratorOffset", theNumeratorOffset), currentHashCode, theNumeratorOffset);
        }
        {
            Integer theAbsoluteDenominator;
            theAbsoluteDenominator = this.getAbsoluteDenominator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "absoluteDenominator", theAbsoluteDenominator), currentHashCode, theAbsoluteDenominator);
        }
        {
            Boolean theIncludesLastItemInRange;
            theIncludesLastItemInRange = this.isIncludesLastItemInRange();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "includesLastItemInRange", theIncludesLastItemInRange), currentHashCode, theIncludesLastItemInRange);
        }
        {
            Integer theTotalItemsInView;
            theTotalItemsInView = this.getTotalItemsInView();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalItemsInView", theTotalItemsInView), currentHashCode, theTotalItemsInView);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
