//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.18 at 02:30:12 PM CEST 
//


package com.microsoft.exchange.types;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for BaseFolderType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="BaseFolderType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="FolderId" type="{http://schemas.microsoft.com/exchange/services/2006/types}FolderIdType" minOccurs="0"/>
 *         &lt;element name="ParentFolderId" type="{http://schemas.microsoft.com/exchange/services/2006/types}FolderIdType" minOccurs="0"/>
 *         &lt;element name="FolderClass" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="DisplayName" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="TotalCount" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="ChildFolderCount" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="ExtendedProperty" type="{http://schemas.microsoft.com/exchange/services/2006/types}ExtendedPropertyType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="ManagedFolderInformation" type="{http://schemas.microsoft.com/exchange/services/2006/types}ManagedFolderInformationType" minOccurs="0"/>
 *         &lt;element name="EffectiveRights" type="{http://schemas.microsoft.com/exchange/services/2006/types}EffectiveRightsType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "BaseFolderType", propOrder = {
    "folderId",
    "parentFolderId",
    "folderClass",
    "displayName",
    "totalCount",
    "childFolderCount",
    "extendedProperties",
    "managedFolderInformation",
    "effectiveRights"
})
@XmlSeeAlso({
    ContactsFolderType.class,
    CalendarFolderType.class,
    FolderType.class
})
public abstract class BaseFolderType implements Equals, HashCode, ToString
{

    @XmlElement(name = "FolderId")
    protected FolderIdType folderId;
    @XmlElement(name = "ParentFolderId")
    protected FolderIdType parentFolderId;
    @XmlElement(name = "FolderClass")
    protected String folderClass;
    @XmlElement(name = "DisplayName")
    protected String displayName;
    @XmlElement(name = "TotalCount")
    protected Integer totalCount;
    @XmlElement(name = "ChildFolderCount")
    protected Integer childFolderCount;
    @XmlElement(name = "ExtendedProperty")
    protected List<ExtendedPropertyType> extendedProperties;
    @XmlElement(name = "ManagedFolderInformation")
    protected ManagedFolderInformationType managedFolderInformation;
    @XmlElement(name = "EffectiveRights")
    protected EffectiveRightsType effectiveRights;

    /**
     * Gets the value of the folderId property.
     * 
     * @return
     *     possible object is
     *     {@link FolderIdType }
     *     
     */
    public FolderIdType getFolderId() {
        return folderId;
    }

    /**
     * Sets the value of the folderId property.
     * 
     * @param value
     *     allowed object is
     *     {@link FolderIdType }
     *     
     */
    public void setFolderId(FolderIdType value) {
        this.folderId = value;
    }

    /**
     * Gets the value of the parentFolderId property.
     * 
     * @return
     *     possible object is
     *     {@link FolderIdType }
     *     
     */
    public FolderIdType getParentFolderId() {
        return parentFolderId;
    }

    /**
     * Sets the value of the parentFolderId property.
     * 
     * @param value
     *     allowed object is
     *     {@link FolderIdType }
     *     
     */
    public void setParentFolderId(FolderIdType value) {
        this.parentFolderId = value;
    }

    /**
     * Gets the value of the folderClass property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFolderClass() {
        return folderClass;
    }

    /**
     * Sets the value of the folderClass property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFolderClass(String value) {
        this.folderClass = value;
    }

    /**
     * Gets the value of the displayName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Sets the value of the displayName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDisplayName(String value) {
        this.displayName = value;
    }

    /**
     * Gets the value of the totalCount property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getTotalCount() {
        return totalCount;
    }

    /**
     * Sets the value of the totalCount property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setTotalCount(Integer value) {
        this.totalCount = value;
    }

    /**
     * Gets the value of the childFolderCount property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getChildFolderCount() {
        return childFolderCount;
    }

    /**
     * Sets the value of the childFolderCount property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setChildFolderCount(Integer value) {
        this.childFolderCount = value;
    }

    /**
     * Gets the value of the extendedProperties property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the extendedProperties property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExtendedProperties().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ExtendedPropertyType }
     * 
     * 
     */
    public List<ExtendedPropertyType> getExtendedProperties() {
        if (extendedProperties == null) {
            extendedProperties = new ArrayList<ExtendedPropertyType>();
        }
        return this.extendedProperties;
    }

    /**
     * Gets the value of the managedFolderInformation property.
     * 
     * @return
     *     possible object is
     *     {@link ManagedFolderInformationType }
     *     
     */
    public ManagedFolderInformationType getManagedFolderInformation() {
        return managedFolderInformation;
    }

    /**
     * Sets the value of the managedFolderInformation property.
     * 
     * @param value
     *     allowed object is
     *     {@link ManagedFolderInformationType }
     *     
     */
    public void setManagedFolderInformation(ManagedFolderInformationType value) {
        this.managedFolderInformation = value;
    }

    /**
     * Gets the value of the effectiveRights property.
     * 
     * @return
     *     possible object is
     *     {@link EffectiveRightsType }
     *     
     */
    public EffectiveRightsType getEffectiveRights() {
        return effectiveRights;
    }

    /**
     * Sets the value of the effectiveRights property.
     * 
     * @param value
     *     allowed object is
     *     {@link EffectiveRightsType }
     *     
     */
    public void setEffectiveRights(EffectiveRightsType value) {
        this.effectiveRights = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            FolderIdType theFolderId;
            theFolderId = this.getFolderId();
            strategy.appendField(locator, this, "folderId", buffer, theFolderId);
        }
        {
            FolderIdType theParentFolderId;
            theParentFolderId = this.getParentFolderId();
            strategy.appendField(locator, this, "parentFolderId", buffer, theParentFolderId);
        }
        {
            String theFolderClass;
            theFolderClass = this.getFolderClass();
            strategy.appendField(locator, this, "folderClass", buffer, theFolderClass);
        }
        {
            String theDisplayName;
            theDisplayName = this.getDisplayName();
            strategy.appendField(locator, this, "displayName", buffer, theDisplayName);
        }
        {
            Integer theTotalCount;
            theTotalCount = this.getTotalCount();
            strategy.appendField(locator, this, "totalCount", buffer, theTotalCount);
        }
        {
            Integer theChildFolderCount;
            theChildFolderCount = this.getChildFolderCount();
            strategy.appendField(locator, this, "childFolderCount", buffer, theChildFolderCount);
        }
        {
            List<ExtendedPropertyType> theExtendedProperties;
            theExtendedProperties = this.getExtendedProperties();
            strategy.appendField(locator, this, "extendedProperties", buffer, theExtendedProperties);
        }
        {
            ManagedFolderInformationType theManagedFolderInformation;
            theManagedFolderInformation = this.getManagedFolderInformation();
            strategy.appendField(locator, this, "managedFolderInformation", buffer, theManagedFolderInformation);
        }
        {
            EffectiveRightsType theEffectiveRights;
            theEffectiveRights = this.getEffectiveRights();
            strategy.appendField(locator, this, "effectiveRights", buffer, theEffectiveRights);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof BaseFolderType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final BaseFolderType that = ((BaseFolderType) object);
        {
            FolderIdType lhsFolderId;
            lhsFolderId = this.getFolderId();
            FolderIdType rhsFolderId;
            rhsFolderId = that.getFolderId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "folderId", lhsFolderId), LocatorUtils.property(thatLocator, "folderId", rhsFolderId), lhsFolderId, rhsFolderId)) {
                return false;
            }
        }
        {
            FolderIdType lhsParentFolderId;
            lhsParentFolderId = this.getParentFolderId();
            FolderIdType rhsParentFolderId;
            rhsParentFolderId = that.getParentFolderId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "parentFolderId", lhsParentFolderId), LocatorUtils.property(thatLocator, "parentFolderId", rhsParentFolderId), lhsParentFolderId, rhsParentFolderId)) {
                return false;
            }
        }
        {
            String lhsFolderClass;
            lhsFolderClass = this.getFolderClass();
            String rhsFolderClass;
            rhsFolderClass = that.getFolderClass();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "folderClass", lhsFolderClass), LocatorUtils.property(thatLocator, "folderClass", rhsFolderClass), lhsFolderClass, rhsFolderClass)) {
                return false;
            }
        }
        {
            String lhsDisplayName;
            lhsDisplayName = this.getDisplayName();
            String rhsDisplayName;
            rhsDisplayName = that.getDisplayName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "displayName", lhsDisplayName), LocatorUtils.property(thatLocator, "displayName", rhsDisplayName), lhsDisplayName, rhsDisplayName)) {
                return false;
            }
        }
        {
            Integer lhsTotalCount;
            lhsTotalCount = this.getTotalCount();
            Integer rhsTotalCount;
            rhsTotalCount = that.getTotalCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totalCount", lhsTotalCount), LocatorUtils.property(thatLocator, "totalCount", rhsTotalCount), lhsTotalCount, rhsTotalCount)) {
                return false;
            }
        }
        {
            Integer lhsChildFolderCount;
            lhsChildFolderCount = this.getChildFolderCount();
            Integer rhsChildFolderCount;
            rhsChildFolderCount = that.getChildFolderCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "childFolderCount", lhsChildFolderCount), LocatorUtils.property(thatLocator, "childFolderCount", rhsChildFolderCount), lhsChildFolderCount, rhsChildFolderCount)) {
                return false;
            }
        }
        {
            List<ExtendedPropertyType> lhsExtendedProperties;
            lhsExtendedProperties = this.getExtendedProperties();
            List<ExtendedPropertyType> rhsExtendedProperties;
            rhsExtendedProperties = that.getExtendedProperties();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extendedProperties", lhsExtendedProperties), LocatorUtils.property(thatLocator, "extendedProperties", rhsExtendedProperties), lhsExtendedProperties, rhsExtendedProperties)) {
                return false;
            }
        }
        {
            ManagedFolderInformationType lhsManagedFolderInformation;
            lhsManagedFolderInformation = this.getManagedFolderInformation();
            ManagedFolderInformationType rhsManagedFolderInformation;
            rhsManagedFolderInformation = that.getManagedFolderInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "managedFolderInformation", lhsManagedFolderInformation), LocatorUtils.property(thatLocator, "managedFolderInformation", rhsManagedFolderInformation), lhsManagedFolderInformation, rhsManagedFolderInformation)) {
                return false;
            }
        }
        {
            EffectiveRightsType lhsEffectiveRights;
            lhsEffectiveRights = this.getEffectiveRights();
            EffectiveRightsType rhsEffectiveRights;
            rhsEffectiveRights = that.getEffectiveRights();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveRights", lhsEffectiveRights), LocatorUtils.property(thatLocator, "effectiveRights", rhsEffectiveRights), lhsEffectiveRights, rhsEffectiveRights)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            FolderIdType theFolderId;
            theFolderId = this.getFolderId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "folderId", theFolderId), currentHashCode, theFolderId);
        }
        {
            FolderIdType theParentFolderId;
            theParentFolderId = this.getParentFolderId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "parentFolderId", theParentFolderId), currentHashCode, theParentFolderId);
        }
        {
            String theFolderClass;
            theFolderClass = this.getFolderClass();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "folderClass", theFolderClass), currentHashCode, theFolderClass);
        }
        {
            String theDisplayName;
            theDisplayName = this.getDisplayName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "displayName", theDisplayName), currentHashCode, theDisplayName);
        }
        {
            Integer theTotalCount;
            theTotalCount = this.getTotalCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalCount", theTotalCount), currentHashCode, theTotalCount);
        }
        {
            Integer theChildFolderCount;
            theChildFolderCount = this.getChildFolderCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "childFolderCount", theChildFolderCount), currentHashCode, theChildFolderCount);
        }
        {
            List<ExtendedPropertyType> theExtendedProperties;
            theExtendedProperties = this.getExtendedProperties();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extendedProperties", theExtendedProperties), currentHashCode, theExtendedProperties);
        }
        {
            ManagedFolderInformationType theManagedFolderInformation;
            theManagedFolderInformation = this.getManagedFolderInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "managedFolderInformation", theManagedFolderInformation), currentHashCode, theManagedFolderInformation);
        }
        {
            EffectiveRightsType theEffectiveRights;
            theEffectiveRights = this.getEffectiveRights();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveRights", theEffectiveRights), currentHashCode, theEffectiveRights);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
