//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.20 at 01:37:20 PM CEST 
//


package com.microsoft.exchange.types;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MessageType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MessageType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/exchange/services/2006/types}ItemType">
 *       &lt;sequence>
 *         &lt;element name="Sender" type="{http://schemas.microsoft.com/exchange/services/2006/types}SingleRecipientType" minOccurs="0"/>
 *         &lt;element name="ToRecipients" type="{http://schemas.microsoft.com/exchange/services/2006/types}ArrayOfRecipientsType" minOccurs="0"/>
 *         &lt;element name="CcRecipients" type="{http://schemas.microsoft.com/exchange/services/2006/types}ArrayOfRecipientsType" minOccurs="0"/>
 *         &lt;element name="BccRecipients" type="{http://schemas.microsoft.com/exchange/services/2006/types}ArrayOfRecipientsType" minOccurs="0"/>
 *         &lt;element name="IsReadReceiptRequested" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="IsDeliveryReceiptRequested" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="ConversationIndex" type="{http://www.w3.org/2001/XMLSchema}base64Binary" minOccurs="0"/>
 *         &lt;element name="ConversationTopic" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="From" type="{http://schemas.microsoft.com/exchange/services/2006/types}SingleRecipientType" minOccurs="0"/>
 *         &lt;element name="InternetMessageId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="IsRead" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="IsResponseRequested" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="References" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="ReplyTo" type="{http://schemas.microsoft.com/exchange/services/2006/types}ArrayOfRecipientsType" minOccurs="0"/>
 *         &lt;element name="ReceivedBy" type="{http://schemas.microsoft.com/exchange/services/2006/types}SingleRecipientType" minOccurs="0"/>
 *         &lt;element name="ReceivedRepresenting" type="{http://schemas.microsoft.com/exchange/services/2006/types}SingleRecipientType" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MessageType", propOrder = {
    "sender",
    "toRecipients",
    "ccRecipients",
    "bccRecipients",
    "isReadReceiptRequested",
    "isDeliveryReceiptRequested",
    "conversationIndex",
    "conversationTopic",
    "from",
    "internetMessageId",
    "isRead",
    "isResponseRequested",
    "references",
    "replyTo",
    "receivedBy",
    "receivedRepresenting"
})
@XmlSeeAlso({
    MeetingMessageType.class,
    ResponseObjectCoreType.class
})
public class MessageType
    extends ItemType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "Sender")
    protected SingleRecipientType sender;
    @XmlElement(name = "ToRecipients")
    protected ArrayOfRecipientsType toRecipients;
    @XmlElement(name = "CcRecipients")
    protected ArrayOfRecipientsType ccRecipients;
    @XmlElement(name = "BccRecipients")
    protected ArrayOfRecipientsType bccRecipients;
    @XmlElement(name = "IsReadReceiptRequested")
    protected Boolean isReadReceiptRequested;
    @XmlElement(name = "IsDeliveryReceiptRequested")
    protected Boolean isDeliveryReceiptRequested;
    @XmlElement(name = "ConversationIndex")
    protected byte[] conversationIndex;
    @XmlElement(name = "ConversationTopic")
    protected String conversationTopic;
    @XmlElement(name = "From")
    protected SingleRecipientType from;
    @XmlElement(name = "InternetMessageId")
    protected String internetMessageId;
    @XmlElement(name = "IsRead")
    protected Boolean isRead;
    @XmlElement(name = "IsResponseRequested")
    protected Boolean isResponseRequested;
    @XmlElement(name = "References")
    protected String references;
    @XmlElement(name = "ReplyTo")
    protected ArrayOfRecipientsType replyTo;
    @XmlElement(name = "ReceivedBy")
    protected SingleRecipientType receivedBy;
    @XmlElement(name = "ReceivedRepresenting")
    protected SingleRecipientType receivedRepresenting;

    /**
     * Gets the value of the sender property.
     * 
     * @return
     *     possible object is
     *     {@link SingleRecipientType }
     *     
     */
    public SingleRecipientType getSender() {
        return sender;
    }

    /**
     * Sets the value of the sender property.
     * 
     * @param value
     *     allowed object is
     *     {@link SingleRecipientType }
     *     
     */
    public void setSender(SingleRecipientType value) {
        this.sender = value;
    }

    /**
     * Gets the value of the toRecipients property.
     * 
     * @return
     *     possible object is
     *     {@link ArrayOfRecipientsType }
     *     
     */
    public ArrayOfRecipientsType getToRecipients() {
        return toRecipients;
    }

    /**
     * Sets the value of the toRecipients property.
     * 
     * @param value
     *     allowed object is
     *     {@link ArrayOfRecipientsType }
     *     
     */
    public void setToRecipients(ArrayOfRecipientsType value) {
        this.toRecipients = value;
    }

    /**
     * Gets the value of the ccRecipients property.
     * 
     * @return
     *     possible object is
     *     {@link ArrayOfRecipientsType }
     *     
     */
    public ArrayOfRecipientsType getCcRecipients() {
        return ccRecipients;
    }

    /**
     * Sets the value of the ccRecipients property.
     * 
     * @param value
     *     allowed object is
     *     {@link ArrayOfRecipientsType }
     *     
     */
    public void setCcRecipients(ArrayOfRecipientsType value) {
        this.ccRecipients = value;
    }

    /**
     * Gets the value of the bccRecipients property.
     * 
     * @return
     *     possible object is
     *     {@link ArrayOfRecipientsType }
     *     
     */
    public ArrayOfRecipientsType getBccRecipients() {
        return bccRecipients;
    }

    /**
     * Sets the value of the bccRecipients property.
     * 
     * @param value
     *     allowed object is
     *     {@link ArrayOfRecipientsType }
     *     
     */
    public void setBccRecipients(ArrayOfRecipientsType value) {
        this.bccRecipients = value;
    }

    /**
     * Gets the value of the isReadReceiptRequested property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsReadReceiptRequested() {
        return isReadReceiptRequested;
    }

    /**
     * Sets the value of the isReadReceiptRequested property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsReadReceiptRequested(Boolean value) {
        this.isReadReceiptRequested = value;
    }

    /**
     * Gets the value of the isDeliveryReceiptRequested property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsDeliveryReceiptRequested() {
        return isDeliveryReceiptRequested;
    }

    /**
     * Sets the value of the isDeliveryReceiptRequested property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsDeliveryReceiptRequested(Boolean value) {
        this.isDeliveryReceiptRequested = value;
    }

    /**
     * Gets the value of the conversationIndex property.
     * 
     * @return
     *     possible object is
     *     byte[]
     */
    public byte[] getConversationIndex() {
        return conversationIndex;
    }

    /**
     * Sets the value of the conversationIndex property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     */
    public void setConversationIndex(byte[] value) {
        this.conversationIndex = value;
    }

    /**
     * Gets the value of the conversationTopic property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getConversationTopic() {
        return conversationTopic;
    }

    /**
     * Sets the value of the conversationTopic property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setConversationTopic(String value) {
        this.conversationTopic = value;
    }

    /**
     * Gets the value of the from property.
     * 
     * @return
     *     possible object is
     *     {@link SingleRecipientType }
     *     
     */
    public SingleRecipientType getFrom() {
        return from;
    }

    /**
     * Sets the value of the from property.
     * 
     * @param value
     *     allowed object is
     *     {@link SingleRecipientType }
     *     
     */
    public void setFrom(SingleRecipientType value) {
        this.from = value;
    }

    /**
     * Gets the value of the internetMessageId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getInternetMessageId() {
        return internetMessageId;
    }

    /**
     * Sets the value of the internetMessageId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setInternetMessageId(String value) {
        this.internetMessageId = value;
    }

    /**
     * Gets the value of the isRead property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsRead() {
        return isRead;
    }

    /**
     * Sets the value of the isRead property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsRead(Boolean value) {
        this.isRead = value;
    }

    /**
     * Gets the value of the isResponseRequested property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsResponseRequested() {
        return isResponseRequested;
    }

    /**
     * Sets the value of the isResponseRequested property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsResponseRequested(Boolean value) {
        this.isResponseRequested = value;
    }

    /**
     * Gets the value of the references property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getReferences() {
        return references;
    }

    /**
     * Sets the value of the references property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReferences(String value) {
        this.references = value;
    }

    /**
     * Gets the value of the replyTo property.
     * 
     * @return
     *     possible object is
     *     {@link ArrayOfRecipientsType }
     *     
     */
    public ArrayOfRecipientsType getReplyTo() {
        return replyTo;
    }

    /**
     * Sets the value of the replyTo property.
     * 
     * @param value
     *     allowed object is
     *     {@link ArrayOfRecipientsType }
     *     
     */
    public void setReplyTo(ArrayOfRecipientsType value) {
        this.replyTo = value;
    }

    /**
     * Gets the value of the receivedBy property.
     * 
     * @return
     *     possible object is
     *     {@link SingleRecipientType }
     *     
     */
    public SingleRecipientType getReceivedBy() {
        return receivedBy;
    }

    /**
     * Sets the value of the receivedBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link SingleRecipientType }
     *     
     */
    public void setReceivedBy(SingleRecipientType value) {
        this.receivedBy = value;
    }

    /**
     * Gets the value of the receivedRepresenting property.
     * 
     * @return
     *     possible object is
     *     {@link SingleRecipientType }
     *     
     */
    public SingleRecipientType getReceivedRepresenting() {
        return receivedRepresenting;
    }

    /**
     * Sets the value of the receivedRepresenting property.
     * 
     * @param value
     *     allowed object is
     *     {@link SingleRecipientType }
     *     
     */
    public void setReceivedRepresenting(SingleRecipientType value) {
        this.receivedRepresenting = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            SingleRecipientType theSender;
            theSender = this.getSender();
            strategy.appendField(locator, this, "sender", buffer, theSender);
        }
        {
            ArrayOfRecipientsType theToRecipients;
            theToRecipients = this.getToRecipients();
            strategy.appendField(locator, this, "toRecipients", buffer, theToRecipients);
        }
        {
            ArrayOfRecipientsType theCcRecipients;
            theCcRecipients = this.getCcRecipients();
            strategy.appendField(locator, this, "ccRecipients", buffer, theCcRecipients);
        }
        {
            ArrayOfRecipientsType theBccRecipients;
            theBccRecipients = this.getBccRecipients();
            strategy.appendField(locator, this, "bccRecipients", buffer, theBccRecipients);
        }
        {
            Boolean theIsReadReceiptRequested;
            theIsReadReceiptRequested = this.isIsReadReceiptRequested();
            strategy.appendField(locator, this, "isReadReceiptRequested", buffer, theIsReadReceiptRequested);
        }
        {
            Boolean theIsDeliveryReceiptRequested;
            theIsDeliveryReceiptRequested = this.isIsDeliveryReceiptRequested();
            strategy.appendField(locator, this, "isDeliveryReceiptRequested", buffer, theIsDeliveryReceiptRequested);
        }
        {
            byte[] theConversationIndex;
            theConversationIndex = this.getConversationIndex();
            strategy.appendField(locator, this, "conversationIndex", buffer, theConversationIndex);
        }
        {
            String theConversationTopic;
            theConversationTopic = this.getConversationTopic();
            strategy.appendField(locator, this, "conversationTopic", buffer, theConversationTopic);
        }
        {
            SingleRecipientType theFrom;
            theFrom = this.getFrom();
            strategy.appendField(locator, this, "from", buffer, theFrom);
        }
        {
            String theInternetMessageId;
            theInternetMessageId = this.getInternetMessageId();
            strategy.appendField(locator, this, "internetMessageId", buffer, theInternetMessageId);
        }
        {
            Boolean theIsRead;
            theIsRead = this.isIsRead();
            strategy.appendField(locator, this, "isRead", buffer, theIsRead);
        }
        {
            Boolean theIsResponseRequested;
            theIsResponseRequested = this.isIsResponseRequested();
            strategy.appendField(locator, this, "isResponseRequested", buffer, theIsResponseRequested);
        }
        {
            String theReferences;
            theReferences = this.getReferences();
            strategy.appendField(locator, this, "references", buffer, theReferences);
        }
        {
            ArrayOfRecipientsType theReplyTo;
            theReplyTo = this.getReplyTo();
            strategy.appendField(locator, this, "replyTo", buffer, theReplyTo);
        }
        {
            SingleRecipientType theReceivedBy;
            theReceivedBy = this.getReceivedBy();
            strategy.appendField(locator, this, "receivedBy", buffer, theReceivedBy);
        }
        {
            SingleRecipientType theReceivedRepresenting;
            theReceivedRepresenting = this.getReceivedRepresenting();
            strategy.appendField(locator, this, "receivedRepresenting", buffer, theReceivedRepresenting);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MessageType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MessageType that = ((MessageType) object);
        {
            SingleRecipientType lhsSender;
            lhsSender = this.getSender();
            SingleRecipientType rhsSender;
            rhsSender = that.getSender();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sender", lhsSender), LocatorUtils.property(thatLocator, "sender", rhsSender), lhsSender, rhsSender)) {
                return false;
            }
        }
        {
            ArrayOfRecipientsType lhsToRecipients;
            lhsToRecipients = this.getToRecipients();
            ArrayOfRecipientsType rhsToRecipients;
            rhsToRecipients = that.getToRecipients();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "toRecipients", lhsToRecipients), LocatorUtils.property(thatLocator, "toRecipients", rhsToRecipients), lhsToRecipients, rhsToRecipients)) {
                return false;
            }
        }
        {
            ArrayOfRecipientsType lhsCcRecipients;
            lhsCcRecipients = this.getCcRecipients();
            ArrayOfRecipientsType rhsCcRecipients;
            rhsCcRecipients = that.getCcRecipients();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ccRecipients", lhsCcRecipients), LocatorUtils.property(thatLocator, "ccRecipients", rhsCcRecipients), lhsCcRecipients, rhsCcRecipients)) {
                return false;
            }
        }
        {
            ArrayOfRecipientsType lhsBccRecipients;
            lhsBccRecipients = this.getBccRecipients();
            ArrayOfRecipientsType rhsBccRecipients;
            rhsBccRecipients = that.getBccRecipients();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bccRecipients", lhsBccRecipients), LocatorUtils.property(thatLocator, "bccRecipients", rhsBccRecipients), lhsBccRecipients, rhsBccRecipients)) {
                return false;
            }
        }
        {
            Boolean lhsIsReadReceiptRequested;
            lhsIsReadReceiptRequested = this.isIsReadReceiptRequested();
            Boolean rhsIsReadReceiptRequested;
            rhsIsReadReceiptRequested = that.isIsReadReceiptRequested();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isReadReceiptRequested", lhsIsReadReceiptRequested), LocatorUtils.property(thatLocator, "isReadReceiptRequested", rhsIsReadReceiptRequested), lhsIsReadReceiptRequested, rhsIsReadReceiptRequested)) {
                return false;
            }
        }
        {
            Boolean lhsIsDeliveryReceiptRequested;
            lhsIsDeliveryReceiptRequested = this.isIsDeliveryReceiptRequested();
            Boolean rhsIsDeliveryReceiptRequested;
            rhsIsDeliveryReceiptRequested = that.isIsDeliveryReceiptRequested();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isDeliveryReceiptRequested", lhsIsDeliveryReceiptRequested), LocatorUtils.property(thatLocator, "isDeliveryReceiptRequested", rhsIsDeliveryReceiptRequested), lhsIsDeliveryReceiptRequested, rhsIsDeliveryReceiptRequested)) {
                return false;
            }
        }
        {
            byte[] lhsConversationIndex;
            lhsConversationIndex = this.getConversationIndex();
            byte[] rhsConversationIndex;
            rhsConversationIndex = that.getConversationIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conversationIndex", lhsConversationIndex), LocatorUtils.property(thatLocator, "conversationIndex", rhsConversationIndex), lhsConversationIndex, rhsConversationIndex)) {
                return false;
            }
        }
        {
            String lhsConversationTopic;
            lhsConversationTopic = this.getConversationTopic();
            String rhsConversationTopic;
            rhsConversationTopic = that.getConversationTopic();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conversationTopic", lhsConversationTopic), LocatorUtils.property(thatLocator, "conversationTopic", rhsConversationTopic), lhsConversationTopic, rhsConversationTopic)) {
                return false;
            }
        }
        {
            SingleRecipientType lhsFrom;
            lhsFrom = this.getFrom();
            SingleRecipientType rhsFrom;
            rhsFrom = that.getFrom();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "from", lhsFrom), LocatorUtils.property(thatLocator, "from", rhsFrom), lhsFrom, rhsFrom)) {
                return false;
            }
        }
        {
            String lhsInternetMessageId;
            lhsInternetMessageId = this.getInternetMessageId();
            String rhsInternetMessageId;
            rhsInternetMessageId = that.getInternetMessageId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "internetMessageId", lhsInternetMessageId), LocatorUtils.property(thatLocator, "internetMessageId", rhsInternetMessageId), lhsInternetMessageId, rhsInternetMessageId)) {
                return false;
            }
        }
        {
            Boolean lhsIsRead;
            lhsIsRead = this.isIsRead();
            Boolean rhsIsRead;
            rhsIsRead = that.isIsRead();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isRead", lhsIsRead), LocatorUtils.property(thatLocator, "isRead", rhsIsRead), lhsIsRead, rhsIsRead)) {
                return false;
            }
        }
        {
            Boolean lhsIsResponseRequested;
            lhsIsResponseRequested = this.isIsResponseRequested();
            Boolean rhsIsResponseRequested;
            rhsIsResponseRequested = that.isIsResponseRequested();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isResponseRequested", lhsIsResponseRequested), LocatorUtils.property(thatLocator, "isResponseRequested", rhsIsResponseRequested), lhsIsResponseRequested, rhsIsResponseRequested)) {
                return false;
            }
        }
        {
            String lhsReferences;
            lhsReferences = this.getReferences();
            String rhsReferences;
            rhsReferences = that.getReferences();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "references", lhsReferences), LocatorUtils.property(thatLocator, "references", rhsReferences), lhsReferences, rhsReferences)) {
                return false;
            }
        }
        {
            ArrayOfRecipientsType lhsReplyTo;
            lhsReplyTo = this.getReplyTo();
            ArrayOfRecipientsType rhsReplyTo;
            rhsReplyTo = that.getReplyTo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "replyTo", lhsReplyTo), LocatorUtils.property(thatLocator, "replyTo", rhsReplyTo), lhsReplyTo, rhsReplyTo)) {
                return false;
            }
        }
        {
            SingleRecipientType lhsReceivedBy;
            lhsReceivedBy = this.getReceivedBy();
            SingleRecipientType rhsReceivedBy;
            rhsReceivedBy = that.getReceivedBy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "receivedBy", lhsReceivedBy), LocatorUtils.property(thatLocator, "receivedBy", rhsReceivedBy), lhsReceivedBy, rhsReceivedBy)) {
                return false;
            }
        }
        {
            SingleRecipientType lhsReceivedRepresenting;
            lhsReceivedRepresenting = this.getReceivedRepresenting();
            SingleRecipientType rhsReceivedRepresenting;
            rhsReceivedRepresenting = that.getReceivedRepresenting();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "receivedRepresenting", lhsReceivedRepresenting), LocatorUtils.property(thatLocator, "receivedRepresenting", rhsReceivedRepresenting), lhsReceivedRepresenting, rhsReceivedRepresenting)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            SingleRecipientType theSender;
            theSender = this.getSender();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sender", theSender), currentHashCode, theSender);
        }
        {
            ArrayOfRecipientsType theToRecipients;
            theToRecipients = this.getToRecipients();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "toRecipients", theToRecipients), currentHashCode, theToRecipients);
        }
        {
            ArrayOfRecipientsType theCcRecipients;
            theCcRecipients = this.getCcRecipients();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ccRecipients", theCcRecipients), currentHashCode, theCcRecipients);
        }
        {
            ArrayOfRecipientsType theBccRecipients;
            theBccRecipients = this.getBccRecipients();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bccRecipients", theBccRecipients), currentHashCode, theBccRecipients);
        }
        {
            Boolean theIsReadReceiptRequested;
            theIsReadReceiptRequested = this.isIsReadReceiptRequested();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isReadReceiptRequested", theIsReadReceiptRequested), currentHashCode, theIsReadReceiptRequested);
        }
        {
            Boolean theIsDeliveryReceiptRequested;
            theIsDeliveryReceiptRequested = this.isIsDeliveryReceiptRequested();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isDeliveryReceiptRequested", theIsDeliveryReceiptRequested), currentHashCode, theIsDeliveryReceiptRequested);
        }
        {
            byte[] theConversationIndex;
            theConversationIndex = this.getConversationIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conversationIndex", theConversationIndex), currentHashCode, theConversationIndex);
        }
        {
            String theConversationTopic;
            theConversationTopic = this.getConversationTopic();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conversationTopic", theConversationTopic), currentHashCode, theConversationTopic);
        }
        {
            SingleRecipientType theFrom;
            theFrom = this.getFrom();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "from", theFrom), currentHashCode, theFrom);
        }
        {
            String theInternetMessageId;
            theInternetMessageId = this.getInternetMessageId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "internetMessageId", theInternetMessageId), currentHashCode, theInternetMessageId);
        }
        {
            Boolean theIsRead;
            theIsRead = this.isIsRead();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isRead", theIsRead), currentHashCode, theIsRead);
        }
        {
            Boolean theIsResponseRequested;
            theIsResponseRequested = this.isIsResponseRequested();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isResponseRequested", theIsResponseRequested), currentHashCode, theIsResponseRequested);
        }
        {
            String theReferences;
            theReferences = this.getReferences();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "references", theReferences), currentHashCode, theReferences);
        }
        {
            ArrayOfRecipientsType theReplyTo;
            theReplyTo = this.getReplyTo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "replyTo", theReplyTo), currentHashCode, theReplyTo);
        }
        {
            SingleRecipientType theReceivedBy;
            theReceivedBy = this.getReceivedBy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "receivedBy", theReceivedBy), currentHashCode, theReceivedBy);
        }
        {
            SingleRecipientType theReceivedRepresenting;
            theReceivedRepresenting = this.getReceivedRepresenting();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "receivedRepresenting", theReceivedRepresenting), currentHashCode, theReceivedRepresenting);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
