//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.18 at 02:30:12 PM CEST 
//


package com.microsoft.exchange.types;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MeetingRequestMessageType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MeetingRequestMessageType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/exchange/services/2006/types}MeetingMessageType">
 *       &lt;sequence>
 *         &lt;element name="MeetingRequestType" type="{http://schemas.microsoft.com/exchange/services/2006/types}MeetingRequestTypeType" minOccurs="0"/>
 *         &lt;element name="IntendedFreeBusyStatus" type="{http://schemas.microsoft.com/exchange/services/2006/types}LegacyFreeBusyType" minOccurs="0"/>
 *         &lt;element name="Start" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *         &lt;element name="End" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *         &lt;element name="OriginalStart" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *         &lt;element name="IsAllDayEvent" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="LegacyFreeBusyStatus" type="{http://schemas.microsoft.com/exchange/services/2006/types}LegacyFreeBusyType" minOccurs="0"/>
 *         &lt;element name="Location" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="When" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="IsMeeting" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="IsCancelled" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="IsRecurring" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="MeetingRequestWasSent" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="CalendarItemType" type="{http://schemas.microsoft.com/exchange/services/2006/types}CalendarItemTypeType" minOccurs="0"/>
 *         &lt;element name="MyResponseType" type="{http://schemas.microsoft.com/exchange/services/2006/types}ResponseTypeType" minOccurs="0"/>
 *         &lt;element name="Organizer" type="{http://schemas.microsoft.com/exchange/services/2006/types}SingleRecipientType" minOccurs="0"/>
 *         &lt;element name="RequiredAttendees" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfAttendeesType" minOccurs="0"/>
 *         &lt;element name="OptionalAttendees" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfAttendeesType" minOccurs="0"/>
 *         &lt;element name="Resources" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfAttendeesType" minOccurs="0"/>
 *         &lt;element name="ConflictingMeetingCount" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="AdjacentMeetingCount" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="ConflictingMeetings" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfAllItemsType" minOccurs="0"/>
 *         &lt;element name="AdjacentMeetings" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfAllItemsType" minOccurs="0"/>
 *         &lt;element name="Duration" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="TimeZone" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="AppointmentReplyTime" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/>
 *         &lt;element name="AppointmentSequenceNumber" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="AppointmentState" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="Recurrence" type="{http://schemas.microsoft.com/exchange/services/2006/types}RecurrenceType" minOccurs="0"/>
 *         &lt;element name="FirstOccurrence" type="{http://schemas.microsoft.com/exchange/services/2006/types}OccurrenceInfoType" minOccurs="0"/>
 *         &lt;element name="LastOccurrence" type="{http://schemas.microsoft.com/exchange/services/2006/types}OccurrenceInfoType" minOccurs="0"/>
 *         &lt;element name="ModifiedOccurrences" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfOccurrenceInfoType" minOccurs="0"/>
 *         &lt;element name="DeletedOccurrences" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfDeletedOccurrencesType" minOccurs="0"/>
 *         &lt;element name="MeetingTimeZone" type="{http://schemas.microsoft.com/exchange/services/2006/types}TimeZoneType" minOccurs="0"/>
 *         &lt;element name="ConferenceType" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="AllowNewTimeProposal" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="IsOnlineMeeting" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="MeetingWorkspaceUrl" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="NetShowUrl" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MeetingRequestMessageType", propOrder = {
    "meetingRequestType",
    "intendedFreeBusyStatus",
    "start",
    "end",
    "originalStart",
    "isAllDayEvent",
    "legacyFreeBusyStatus",
    "location",
    "when",
    "isMeeting",
    "isCancelled",
    "isRecurring",
    "meetingRequestWasSent",
    "calendarItemType",
    "myResponseType",
    "organizer",
    "requiredAttendees",
    "optionalAttendees",
    "resources",
    "conflictingMeetingCount",
    "adjacentMeetingCount",
    "conflictingMeetings",
    "adjacentMeetings",
    "duration",
    "timeZone",
    "appointmentReplyTime",
    "appointmentSequenceNumber",
    "appointmentState",
    "recurrence",
    "firstOccurrence",
    "lastOccurrence",
    "modifiedOccurrences",
    "deletedOccurrences",
    "meetingTimeZone",
    "conferenceType",
    "allowNewTimeProposal",
    "isOnlineMeeting",
    "meetingWorkspaceUrl",
    "netShowUrl"
})
public class MeetingRequestMessageType
    extends MeetingMessageType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "MeetingRequestType")
    protected MeetingRequestTypeType meetingRequestType;
    @XmlElement(name = "IntendedFreeBusyStatus")
    protected LegacyFreeBusyType intendedFreeBusyStatus;
    @XmlElement(name = "Start")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar start;
    @XmlElement(name = "End")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar end;
    @XmlElement(name = "OriginalStart")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar originalStart;
    @XmlElement(name = "IsAllDayEvent")
    protected Boolean isAllDayEvent;
    @XmlElement(name = "LegacyFreeBusyStatus")
    protected LegacyFreeBusyType legacyFreeBusyStatus;
    @XmlElement(name = "Location")
    protected String location;
    @XmlElement(name = "When")
    protected String when;
    @XmlElement(name = "IsMeeting")
    protected Boolean isMeeting;
    @XmlElement(name = "IsCancelled")
    protected Boolean isCancelled;
    @XmlElement(name = "IsRecurring")
    protected Boolean isRecurring;
    @XmlElement(name = "MeetingRequestWasSent")
    protected Boolean meetingRequestWasSent;
    @XmlElement(name = "CalendarItemType")
    protected CalendarItemTypeType calendarItemType;
    @XmlElement(name = "MyResponseType")
    protected ResponseTypeType myResponseType;
    @XmlElement(name = "Organizer")
    protected SingleRecipientType organizer;
    @XmlElement(name = "RequiredAttendees")
    protected NonEmptyArrayOfAttendeesType requiredAttendees;
    @XmlElement(name = "OptionalAttendees")
    protected NonEmptyArrayOfAttendeesType optionalAttendees;
    @XmlElement(name = "Resources")
    protected NonEmptyArrayOfAttendeesType resources;
    @XmlElement(name = "ConflictingMeetingCount")
    protected Integer conflictingMeetingCount;
    @XmlElement(name = "AdjacentMeetingCount")
    protected Integer adjacentMeetingCount;
    @XmlElement(name = "ConflictingMeetings")
    protected NonEmptyArrayOfAllItemsType conflictingMeetings;
    @XmlElement(name = "AdjacentMeetings")
    protected NonEmptyArrayOfAllItemsType adjacentMeetings;
    @XmlElement(name = "Duration")
    protected String duration;
    @XmlElement(name = "TimeZone")
    protected String timeZone;
    @XmlElement(name = "AppointmentReplyTime")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar appointmentReplyTime;
    @XmlElement(name = "AppointmentSequenceNumber")
    protected Integer appointmentSequenceNumber;
    @XmlElement(name = "AppointmentState")
    protected Integer appointmentState;
    @XmlElement(name = "Recurrence")
    protected RecurrenceType recurrence;
    @XmlElement(name = "FirstOccurrence")
    protected OccurrenceInfoType firstOccurrence;
    @XmlElement(name = "LastOccurrence")
    protected OccurrenceInfoType lastOccurrence;
    @XmlElement(name = "ModifiedOccurrences")
    protected NonEmptyArrayOfOccurrenceInfoType modifiedOccurrences;
    @XmlElement(name = "DeletedOccurrences")
    protected NonEmptyArrayOfDeletedOccurrencesType deletedOccurrences;
    @XmlElement(name = "MeetingTimeZone")
    protected TimeZoneType meetingTimeZone;
    @XmlElement(name = "ConferenceType")
    protected Integer conferenceType;
    @XmlElement(name = "AllowNewTimeProposal")
    protected Boolean allowNewTimeProposal;
    @XmlElement(name = "IsOnlineMeeting")
    protected Boolean isOnlineMeeting;
    @XmlElement(name = "MeetingWorkspaceUrl")
    protected String meetingWorkspaceUrl;
    @XmlElement(name = "NetShowUrl")
    protected String netShowUrl;

    /**
     * Gets the value of the meetingRequestType property.
     * 
     * @return
     *     possible object is
     *     {@link MeetingRequestTypeType }
     *     
     */
    public MeetingRequestTypeType getMeetingRequestType() {
        return meetingRequestType;
    }

    /**
     * Sets the value of the meetingRequestType property.
     * 
     * @param value
     *     allowed object is
     *     {@link MeetingRequestTypeType }
     *     
     */
    public void setMeetingRequestType(MeetingRequestTypeType value) {
        this.meetingRequestType = value;
    }

    /**
     * Gets the value of the intendedFreeBusyStatus property.
     * 
     * @return
     *     possible object is
     *     {@link LegacyFreeBusyType }
     *     
     */
    public LegacyFreeBusyType getIntendedFreeBusyStatus() {
        return intendedFreeBusyStatus;
    }

    /**
     * Sets the value of the intendedFreeBusyStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link LegacyFreeBusyType }
     *     
     */
    public void setIntendedFreeBusyStatus(LegacyFreeBusyType value) {
        this.intendedFreeBusyStatus = value;
    }

    /**
     * Gets the value of the start property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getStart() {
        return start;
    }

    /**
     * Sets the value of the start property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setStart(XMLGregorianCalendar value) {
        this.start = value;
    }

    /**
     * Gets the value of the end property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getEnd() {
        return end;
    }

    /**
     * Sets the value of the end property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setEnd(XMLGregorianCalendar value) {
        this.end = value;
    }

    /**
     * Gets the value of the originalStart property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getOriginalStart() {
        return originalStart;
    }

    /**
     * Sets the value of the originalStart property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setOriginalStart(XMLGregorianCalendar value) {
        this.originalStart = value;
    }

    /**
     * Gets the value of the isAllDayEvent property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsAllDayEvent() {
        return isAllDayEvent;
    }

    /**
     * Sets the value of the isAllDayEvent property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsAllDayEvent(Boolean value) {
        this.isAllDayEvent = value;
    }

    /**
     * Gets the value of the legacyFreeBusyStatus property.
     * 
     * @return
     *     possible object is
     *     {@link LegacyFreeBusyType }
     *     
     */
    public LegacyFreeBusyType getLegacyFreeBusyStatus() {
        return legacyFreeBusyStatus;
    }

    /**
     * Sets the value of the legacyFreeBusyStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link LegacyFreeBusyType }
     *     
     */
    public void setLegacyFreeBusyStatus(LegacyFreeBusyType value) {
        this.legacyFreeBusyStatus = value;
    }

    /**
     * Gets the value of the location property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLocation() {
        return location;
    }

    /**
     * Sets the value of the location property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLocation(String value) {
        this.location = value;
    }

    /**
     * Gets the value of the when property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWhen() {
        return when;
    }

    /**
     * Sets the value of the when property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWhen(String value) {
        this.when = value;
    }

    /**
     * Gets the value of the isMeeting property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsMeeting() {
        return isMeeting;
    }

    /**
     * Sets the value of the isMeeting property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsMeeting(Boolean value) {
        this.isMeeting = value;
    }

    /**
     * Gets the value of the isCancelled property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsCancelled() {
        return isCancelled;
    }

    /**
     * Sets the value of the isCancelled property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsCancelled(Boolean value) {
        this.isCancelled = value;
    }

    /**
     * Gets the value of the isRecurring property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsRecurring() {
        return isRecurring;
    }

    /**
     * Sets the value of the isRecurring property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsRecurring(Boolean value) {
        this.isRecurring = value;
    }

    /**
     * Gets the value of the meetingRequestWasSent property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isMeetingRequestWasSent() {
        return meetingRequestWasSent;
    }

    /**
     * Sets the value of the meetingRequestWasSent property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setMeetingRequestWasSent(Boolean value) {
        this.meetingRequestWasSent = value;
    }

    /**
     * Gets the value of the calendarItemType property.
     * 
     * @return
     *     possible object is
     *     {@link CalendarItemTypeType }
     *     
     */
    public CalendarItemTypeType getCalendarItemType() {
        return calendarItemType;
    }

    /**
     * Sets the value of the calendarItemType property.
     * 
     * @param value
     *     allowed object is
     *     {@link CalendarItemTypeType }
     *     
     */
    public void setCalendarItemType(CalendarItemTypeType value) {
        this.calendarItemType = value;
    }

    /**
     * Gets the value of the myResponseType property.
     * 
     * @return
     *     possible object is
     *     {@link ResponseTypeType }
     *     
     */
    public ResponseTypeType getMyResponseType() {
        return myResponseType;
    }

    /**
     * Sets the value of the myResponseType property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResponseTypeType }
     *     
     */
    public void setMyResponseType(ResponseTypeType value) {
        this.myResponseType = value;
    }

    /**
     * Gets the value of the organizer property.
     * 
     * @return
     *     possible object is
     *     {@link SingleRecipientType }
     *     
     */
    public SingleRecipientType getOrganizer() {
        return organizer;
    }

    /**
     * Sets the value of the organizer property.
     * 
     * @param value
     *     allowed object is
     *     {@link SingleRecipientType }
     *     
     */
    public void setOrganizer(SingleRecipientType value) {
        this.organizer = value;
    }

    /**
     * Gets the value of the requiredAttendees property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfAttendeesType }
     *     
     */
    public NonEmptyArrayOfAttendeesType getRequiredAttendees() {
        return requiredAttendees;
    }

    /**
     * Sets the value of the requiredAttendees property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfAttendeesType }
     *     
     */
    public void setRequiredAttendees(NonEmptyArrayOfAttendeesType value) {
        this.requiredAttendees = value;
    }

    /**
     * Gets the value of the optionalAttendees property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfAttendeesType }
     *     
     */
    public NonEmptyArrayOfAttendeesType getOptionalAttendees() {
        return optionalAttendees;
    }

    /**
     * Sets the value of the optionalAttendees property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfAttendeesType }
     *     
     */
    public void setOptionalAttendees(NonEmptyArrayOfAttendeesType value) {
        this.optionalAttendees = value;
    }

    /**
     * Gets the value of the resources property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfAttendeesType }
     *     
     */
    public NonEmptyArrayOfAttendeesType getResources() {
        return resources;
    }

    /**
     * Sets the value of the resources property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfAttendeesType }
     *     
     */
    public void setResources(NonEmptyArrayOfAttendeesType value) {
        this.resources = value;
    }

    /**
     * Gets the value of the conflictingMeetingCount property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getConflictingMeetingCount() {
        return conflictingMeetingCount;
    }

    /**
     * Sets the value of the conflictingMeetingCount property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setConflictingMeetingCount(Integer value) {
        this.conflictingMeetingCount = value;
    }

    /**
     * Gets the value of the adjacentMeetingCount property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getAdjacentMeetingCount() {
        return adjacentMeetingCount;
    }

    /**
     * Sets the value of the adjacentMeetingCount property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setAdjacentMeetingCount(Integer value) {
        this.adjacentMeetingCount = value;
    }

    /**
     * Gets the value of the conflictingMeetings property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfAllItemsType }
     *     
     */
    public NonEmptyArrayOfAllItemsType getConflictingMeetings() {
        return conflictingMeetings;
    }

    /**
     * Sets the value of the conflictingMeetings property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfAllItemsType }
     *     
     */
    public void setConflictingMeetings(NonEmptyArrayOfAllItemsType value) {
        this.conflictingMeetings = value;
    }

    /**
     * Gets the value of the adjacentMeetings property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfAllItemsType }
     *     
     */
    public NonEmptyArrayOfAllItemsType getAdjacentMeetings() {
        return adjacentMeetings;
    }

    /**
     * Sets the value of the adjacentMeetings property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfAllItemsType }
     *     
     */
    public void setAdjacentMeetings(NonEmptyArrayOfAllItemsType value) {
        this.adjacentMeetings = value;
    }

    /**
     * Gets the value of the duration property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDuration() {
        return duration;
    }

    /**
     * Sets the value of the duration property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDuration(String value) {
        this.duration = value;
    }

    /**
     * Gets the value of the timeZone property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTimeZone() {
        return timeZone;
    }

    /**
     * Sets the value of the timeZone property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTimeZone(String value) {
        this.timeZone = value;
    }

    /**
     * Gets the value of the appointmentReplyTime property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getAppointmentReplyTime() {
        return appointmentReplyTime;
    }

    /**
     * Sets the value of the appointmentReplyTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setAppointmentReplyTime(XMLGregorianCalendar value) {
        this.appointmentReplyTime = value;
    }

    /**
     * Gets the value of the appointmentSequenceNumber property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getAppointmentSequenceNumber() {
        return appointmentSequenceNumber;
    }

    /**
     * Sets the value of the appointmentSequenceNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setAppointmentSequenceNumber(Integer value) {
        this.appointmentSequenceNumber = value;
    }

    /**
     * Gets the value of the appointmentState property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getAppointmentState() {
        return appointmentState;
    }

    /**
     * Sets the value of the appointmentState property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setAppointmentState(Integer value) {
        this.appointmentState = value;
    }

    /**
     * Gets the value of the recurrence property.
     * 
     * @return
     *     possible object is
     *     {@link RecurrenceType }
     *     
     */
    public RecurrenceType getRecurrence() {
        return recurrence;
    }

    /**
     * Sets the value of the recurrence property.
     * 
     * @param value
     *     allowed object is
     *     {@link RecurrenceType }
     *     
     */
    public void setRecurrence(RecurrenceType value) {
        this.recurrence = value;
    }

    /**
     * Gets the value of the firstOccurrence property.
     * 
     * @return
     *     possible object is
     *     {@link OccurrenceInfoType }
     *     
     */
    public OccurrenceInfoType getFirstOccurrence() {
        return firstOccurrence;
    }

    /**
     * Sets the value of the firstOccurrence property.
     * 
     * @param value
     *     allowed object is
     *     {@link OccurrenceInfoType }
     *     
     */
    public void setFirstOccurrence(OccurrenceInfoType value) {
        this.firstOccurrence = value;
    }

    /**
     * Gets the value of the lastOccurrence property.
     * 
     * @return
     *     possible object is
     *     {@link OccurrenceInfoType }
     *     
     */
    public OccurrenceInfoType getLastOccurrence() {
        return lastOccurrence;
    }

    /**
     * Sets the value of the lastOccurrence property.
     * 
     * @param value
     *     allowed object is
     *     {@link OccurrenceInfoType }
     *     
     */
    public void setLastOccurrence(OccurrenceInfoType value) {
        this.lastOccurrence = value;
    }

    /**
     * Gets the value of the modifiedOccurrences property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfOccurrenceInfoType }
     *     
     */
    public NonEmptyArrayOfOccurrenceInfoType getModifiedOccurrences() {
        return modifiedOccurrences;
    }

    /**
     * Sets the value of the modifiedOccurrences property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfOccurrenceInfoType }
     *     
     */
    public void setModifiedOccurrences(NonEmptyArrayOfOccurrenceInfoType value) {
        this.modifiedOccurrences = value;
    }

    /**
     * Gets the value of the deletedOccurrences property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfDeletedOccurrencesType }
     *     
     */
    public NonEmptyArrayOfDeletedOccurrencesType getDeletedOccurrences() {
        return deletedOccurrences;
    }

    /**
     * Sets the value of the deletedOccurrences property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfDeletedOccurrencesType }
     *     
     */
    public void setDeletedOccurrences(NonEmptyArrayOfDeletedOccurrencesType value) {
        this.deletedOccurrences = value;
    }

    /**
     * Gets the value of the meetingTimeZone property.
     * 
     * @return
     *     possible object is
     *     {@link TimeZoneType }
     *     
     */
    public TimeZoneType getMeetingTimeZone() {
        return meetingTimeZone;
    }

    /**
     * Sets the value of the meetingTimeZone property.
     * 
     * @param value
     *     allowed object is
     *     {@link TimeZoneType }
     *     
     */
    public void setMeetingTimeZone(TimeZoneType value) {
        this.meetingTimeZone = value;
    }

    /**
     * Gets the value of the conferenceType property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getConferenceType() {
        return conferenceType;
    }

    /**
     * Sets the value of the conferenceType property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setConferenceType(Integer value) {
        this.conferenceType = value;
    }

    /**
     * Gets the value of the allowNewTimeProposal property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isAllowNewTimeProposal() {
        return allowNewTimeProposal;
    }

    /**
     * Sets the value of the allowNewTimeProposal property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAllowNewTimeProposal(Boolean value) {
        this.allowNewTimeProposal = value;
    }

    /**
     * Gets the value of the isOnlineMeeting property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsOnlineMeeting() {
        return isOnlineMeeting;
    }

    /**
     * Sets the value of the isOnlineMeeting property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsOnlineMeeting(Boolean value) {
        this.isOnlineMeeting = value;
    }

    /**
     * Gets the value of the meetingWorkspaceUrl property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMeetingWorkspaceUrl() {
        return meetingWorkspaceUrl;
    }

    /**
     * Sets the value of the meetingWorkspaceUrl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMeetingWorkspaceUrl(String value) {
        this.meetingWorkspaceUrl = value;
    }

    /**
     * Gets the value of the netShowUrl property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNetShowUrl() {
        return netShowUrl;
    }

    /**
     * Sets the value of the netShowUrl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNetShowUrl(String value) {
        this.netShowUrl = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MeetingRequestTypeType theMeetingRequestType;
            theMeetingRequestType = this.getMeetingRequestType();
            strategy.appendField(locator, this, "meetingRequestType", buffer, theMeetingRequestType);
        }
        {
            LegacyFreeBusyType theIntendedFreeBusyStatus;
            theIntendedFreeBusyStatus = this.getIntendedFreeBusyStatus();
            strategy.appendField(locator, this, "intendedFreeBusyStatus", buffer, theIntendedFreeBusyStatus);
        }
        {
            XMLGregorianCalendar theStart;
            theStart = this.getStart();
            strategy.appendField(locator, this, "start", buffer, theStart);
        }
        {
            XMLGregorianCalendar theEnd;
            theEnd = this.getEnd();
            strategy.appendField(locator, this, "end", buffer, theEnd);
        }
        {
            XMLGregorianCalendar theOriginalStart;
            theOriginalStart = this.getOriginalStart();
            strategy.appendField(locator, this, "originalStart", buffer, theOriginalStart);
        }
        {
            Boolean theIsAllDayEvent;
            theIsAllDayEvent = this.isIsAllDayEvent();
            strategy.appendField(locator, this, "isAllDayEvent", buffer, theIsAllDayEvent);
        }
        {
            LegacyFreeBusyType theLegacyFreeBusyStatus;
            theLegacyFreeBusyStatus = this.getLegacyFreeBusyStatus();
            strategy.appendField(locator, this, "legacyFreeBusyStatus", buffer, theLegacyFreeBusyStatus);
        }
        {
            String theLocation;
            theLocation = this.getLocation();
            strategy.appendField(locator, this, "location", buffer, theLocation);
        }
        {
            String theWhen;
            theWhen = this.getWhen();
            strategy.appendField(locator, this, "when", buffer, theWhen);
        }
        {
            Boolean theIsMeeting;
            theIsMeeting = this.isIsMeeting();
            strategy.appendField(locator, this, "isMeeting", buffer, theIsMeeting);
        }
        {
            Boolean theIsCancelled;
            theIsCancelled = this.isIsCancelled();
            strategy.appendField(locator, this, "isCancelled", buffer, theIsCancelled);
        }
        {
            Boolean theIsRecurring;
            theIsRecurring = this.isIsRecurring();
            strategy.appendField(locator, this, "isRecurring", buffer, theIsRecurring);
        }
        {
            Boolean theMeetingRequestWasSent;
            theMeetingRequestWasSent = this.isMeetingRequestWasSent();
            strategy.appendField(locator, this, "meetingRequestWasSent", buffer, theMeetingRequestWasSent);
        }
        {
            CalendarItemTypeType theCalendarItemType;
            theCalendarItemType = this.getCalendarItemType();
            strategy.appendField(locator, this, "calendarItemType", buffer, theCalendarItemType);
        }
        {
            ResponseTypeType theMyResponseType;
            theMyResponseType = this.getMyResponseType();
            strategy.appendField(locator, this, "myResponseType", buffer, theMyResponseType);
        }
        {
            SingleRecipientType theOrganizer;
            theOrganizer = this.getOrganizer();
            strategy.appendField(locator, this, "organizer", buffer, theOrganizer);
        }
        {
            NonEmptyArrayOfAttendeesType theRequiredAttendees;
            theRequiredAttendees = this.getRequiredAttendees();
            strategy.appendField(locator, this, "requiredAttendees", buffer, theRequiredAttendees);
        }
        {
            NonEmptyArrayOfAttendeesType theOptionalAttendees;
            theOptionalAttendees = this.getOptionalAttendees();
            strategy.appendField(locator, this, "optionalAttendees", buffer, theOptionalAttendees);
        }
        {
            NonEmptyArrayOfAttendeesType theResources;
            theResources = this.getResources();
            strategy.appendField(locator, this, "resources", buffer, theResources);
        }
        {
            Integer theConflictingMeetingCount;
            theConflictingMeetingCount = this.getConflictingMeetingCount();
            strategy.appendField(locator, this, "conflictingMeetingCount", buffer, theConflictingMeetingCount);
        }
        {
            Integer theAdjacentMeetingCount;
            theAdjacentMeetingCount = this.getAdjacentMeetingCount();
            strategy.appendField(locator, this, "adjacentMeetingCount", buffer, theAdjacentMeetingCount);
        }
        {
            NonEmptyArrayOfAllItemsType theConflictingMeetings;
            theConflictingMeetings = this.getConflictingMeetings();
            strategy.appendField(locator, this, "conflictingMeetings", buffer, theConflictingMeetings);
        }
        {
            NonEmptyArrayOfAllItemsType theAdjacentMeetings;
            theAdjacentMeetings = this.getAdjacentMeetings();
            strategy.appendField(locator, this, "adjacentMeetings", buffer, theAdjacentMeetings);
        }
        {
            String theDuration;
            theDuration = this.getDuration();
            strategy.appendField(locator, this, "duration", buffer, theDuration);
        }
        {
            String theTimeZone;
            theTimeZone = this.getTimeZone();
            strategy.appendField(locator, this, "timeZone", buffer, theTimeZone);
        }
        {
            XMLGregorianCalendar theAppointmentReplyTime;
            theAppointmentReplyTime = this.getAppointmentReplyTime();
            strategy.appendField(locator, this, "appointmentReplyTime", buffer, theAppointmentReplyTime);
        }
        {
            Integer theAppointmentSequenceNumber;
            theAppointmentSequenceNumber = this.getAppointmentSequenceNumber();
            strategy.appendField(locator, this, "appointmentSequenceNumber", buffer, theAppointmentSequenceNumber);
        }
        {
            Integer theAppointmentState;
            theAppointmentState = this.getAppointmentState();
            strategy.appendField(locator, this, "appointmentState", buffer, theAppointmentState);
        }
        {
            RecurrenceType theRecurrence;
            theRecurrence = this.getRecurrence();
            strategy.appendField(locator, this, "recurrence", buffer, theRecurrence);
        }
        {
            OccurrenceInfoType theFirstOccurrence;
            theFirstOccurrence = this.getFirstOccurrence();
            strategy.appendField(locator, this, "firstOccurrence", buffer, theFirstOccurrence);
        }
        {
            OccurrenceInfoType theLastOccurrence;
            theLastOccurrence = this.getLastOccurrence();
            strategy.appendField(locator, this, "lastOccurrence", buffer, theLastOccurrence);
        }
        {
            NonEmptyArrayOfOccurrenceInfoType theModifiedOccurrences;
            theModifiedOccurrences = this.getModifiedOccurrences();
            strategy.appendField(locator, this, "modifiedOccurrences", buffer, theModifiedOccurrences);
        }
        {
            NonEmptyArrayOfDeletedOccurrencesType theDeletedOccurrences;
            theDeletedOccurrences = this.getDeletedOccurrences();
            strategy.appendField(locator, this, "deletedOccurrences", buffer, theDeletedOccurrences);
        }
        {
            TimeZoneType theMeetingTimeZone;
            theMeetingTimeZone = this.getMeetingTimeZone();
            strategy.appendField(locator, this, "meetingTimeZone", buffer, theMeetingTimeZone);
        }
        {
            Integer theConferenceType;
            theConferenceType = this.getConferenceType();
            strategy.appendField(locator, this, "conferenceType", buffer, theConferenceType);
        }
        {
            Boolean theAllowNewTimeProposal;
            theAllowNewTimeProposal = this.isAllowNewTimeProposal();
            strategy.appendField(locator, this, "allowNewTimeProposal", buffer, theAllowNewTimeProposal);
        }
        {
            Boolean theIsOnlineMeeting;
            theIsOnlineMeeting = this.isIsOnlineMeeting();
            strategy.appendField(locator, this, "isOnlineMeeting", buffer, theIsOnlineMeeting);
        }
        {
            String theMeetingWorkspaceUrl;
            theMeetingWorkspaceUrl = this.getMeetingWorkspaceUrl();
            strategy.appendField(locator, this, "meetingWorkspaceUrl", buffer, theMeetingWorkspaceUrl);
        }
        {
            String theNetShowUrl;
            theNetShowUrl = this.getNetShowUrl();
            strategy.appendField(locator, this, "netShowUrl", buffer, theNetShowUrl);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MeetingRequestMessageType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MeetingRequestMessageType that = ((MeetingRequestMessageType) object);
        {
            MeetingRequestTypeType lhsMeetingRequestType;
            lhsMeetingRequestType = this.getMeetingRequestType();
            MeetingRequestTypeType rhsMeetingRequestType;
            rhsMeetingRequestType = that.getMeetingRequestType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "meetingRequestType", lhsMeetingRequestType), LocatorUtils.property(thatLocator, "meetingRequestType", rhsMeetingRequestType), lhsMeetingRequestType, rhsMeetingRequestType)) {
                return false;
            }
        }
        {
            LegacyFreeBusyType lhsIntendedFreeBusyStatus;
            lhsIntendedFreeBusyStatus = this.getIntendedFreeBusyStatus();
            LegacyFreeBusyType rhsIntendedFreeBusyStatus;
            rhsIntendedFreeBusyStatus = that.getIntendedFreeBusyStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "intendedFreeBusyStatus", lhsIntendedFreeBusyStatus), LocatorUtils.property(thatLocator, "intendedFreeBusyStatus", rhsIntendedFreeBusyStatus), lhsIntendedFreeBusyStatus, rhsIntendedFreeBusyStatus)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsStart;
            lhsStart = this.getStart();
            XMLGregorianCalendar rhsStart;
            rhsStart = that.getStart();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "start", lhsStart), LocatorUtils.property(thatLocator, "start", rhsStart), lhsStart, rhsStart)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsEnd;
            lhsEnd = this.getEnd();
            XMLGregorianCalendar rhsEnd;
            rhsEnd = that.getEnd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "end", lhsEnd), LocatorUtils.property(thatLocator, "end", rhsEnd), lhsEnd, rhsEnd)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsOriginalStart;
            lhsOriginalStart = this.getOriginalStart();
            XMLGregorianCalendar rhsOriginalStart;
            rhsOriginalStart = that.getOriginalStart();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "originalStart", lhsOriginalStart), LocatorUtils.property(thatLocator, "originalStart", rhsOriginalStart), lhsOriginalStart, rhsOriginalStart)) {
                return false;
            }
        }
        {
            Boolean lhsIsAllDayEvent;
            lhsIsAllDayEvent = this.isIsAllDayEvent();
            Boolean rhsIsAllDayEvent;
            rhsIsAllDayEvent = that.isIsAllDayEvent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isAllDayEvent", lhsIsAllDayEvent), LocatorUtils.property(thatLocator, "isAllDayEvent", rhsIsAllDayEvent), lhsIsAllDayEvent, rhsIsAllDayEvent)) {
                return false;
            }
        }
        {
            LegacyFreeBusyType lhsLegacyFreeBusyStatus;
            lhsLegacyFreeBusyStatus = this.getLegacyFreeBusyStatus();
            LegacyFreeBusyType rhsLegacyFreeBusyStatus;
            rhsLegacyFreeBusyStatus = that.getLegacyFreeBusyStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "legacyFreeBusyStatus", lhsLegacyFreeBusyStatus), LocatorUtils.property(thatLocator, "legacyFreeBusyStatus", rhsLegacyFreeBusyStatus), lhsLegacyFreeBusyStatus, rhsLegacyFreeBusyStatus)) {
                return false;
            }
        }
        {
            String lhsLocation;
            lhsLocation = this.getLocation();
            String rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            String lhsWhen;
            lhsWhen = this.getWhen();
            String rhsWhen;
            rhsWhen = that.getWhen();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "when", lhsWhen), LocatorUtils.property(thatLocator, "when", rhsWhen), lhsWhen, rhsWhen)) {
                return false;
            }
        }
        {
            Boolean lhsIsMeeting;
            lhsIsMeeting = this.isIsMeeting();
            Boolean rhsIsMeeting;
            rhsIsMeeting = that.isIsMeeting();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isMeeting", lhsIsMeeting), LocatorUtils.property(thatLocator, "isMeeting", rhsIsMeeting), lhsIsMeeting, rhsIsMeeting)) {
                return false;
            }
        }
        {
            Boolean lhsIsCancelled;
            lhsIsCancelled = this.isIsCancelled();
            Boolean rhsIsCancelled;
            rhsIsCancelled = that.isIsCancelled();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isCancelled", lhsIsCancelled), LocatorUtils.property(thatLocator, "isCancelled", rhsIsCancelled), lhsIsCancelled, rhsIsCancelled)) {
                return false;
            }
        }
        {
            Boolean lhsIsRecurring;
            lhsIsRecurring = this.isIsRecurring();
            Boolean rhsIsRecurring;
            rhsIsRecurring = that.isIsRecurring();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isRecurring", lhsIsRecurring), LocatorUtils.property(thatLocator, "isRecurring", rhsIsRecurring), lhsIsRecurring, rhsIsRecurring)) {
                return false;
            }
        }
        {
            Boolean lhsMeetingRequestWasSent;
            lhsMeetingRequestWasSent = this.isMeetingRequestWasSent();
            Boolean rhsMeetingRequestWasSent;
            rhsMeetingRequestWasSent = that.isMeetingRequestWasSent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "meetingRequestWasSent", lhsMeetingRequestWasSent), LocatorUtils.property(thatLocator, "meetingRequestWasSent", rhsMeetingRequestWasSent), lhsMeetingRequestWasSent, rhsMeetingRequestWasSent)) {
                return false;
            }
        }
        {
            CalendarItemTypeType lhsCalendarItemType;
            lhsCalendarItemType = this.getCalendarItemType();
            CalendarItemTypeType rhsCalendarItemType;
            rhsCalendarItemType = that.getCalendarItemType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "calendarItemType", lhsCalendarItemType), LocatorUtils.property(thatLocator, "calendarItemType", rhsCalendarItemType), lhsCalendarItemType, rhsCalendarItemType)) {
                return false;
            }
        }
        {
            ResponseTypeType lhsMyResponseType;
            lhsMyResponseType = this.getMyResponseType();
            ResponseTypeType rhsMyResponseType;
            rhsMyResponseType = that.getMyResponseType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "myResponseType", lhsMyResponseType), LocatorUtils.property(thatLocator, "myResponseType", rhsMyResponseType), lhsMyResponseType, rhsMyResponseType)) {
                return false;
            }
        }
        {
            SingleRecipientType lhsOrganizer;
            lhsOrganizer = this.getOrganizer();
            SingleRecipientType rhsOrganizer;
            rhsOrganizer = that.getOrganizer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "organizer", lhsOrganizer), LocatorUtils.property(thatLocator, "organizer", rhsOrganizer), lhsOrganizer, rhsOrganizer)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfAttendeesType lhsRequiredAttendees;
            lhsRequiredAttendees = this.getRequiredAttendees();
            NonEmptyArrayOfAttendeesType rhsRequiredAttendees;
            rhsRequiredAttendees = that.getRequiredAttendees();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requiredAttendees", lhsRequiredAttendees), LocatorUtils.property(thatLocator, "requiredAttendees", rhsRequiredAttendees), lhsRequiredAttendees, rhsRequiredAttendees)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfAttendeesType lhsOptionalAttendees;
            lhsOptionalAttendees = this.getOptionalAttendees();
            NonEmptyArrayOfAttendeesType rhsOptionalAttendees;
            rhsOptionalAttendees = that.getOptionalAttendees();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "optionalAttendees", lhsOptionalAttendees), LocatorUtils.property(thatLocator, "optionalAttendees", rhsOptionalAttendees), lhsOptionalAttendees, rhsOptionalAttendees)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfAttendeesType lhsResources;
            lhsResources = this.getResources();
            NonEmptyArrayOfAttendeesType rhsResources;
            rhsResources = that.getResources();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resources", lhsResources), LocatorUtils.property(thatLocator, "resources", rhsResources), lhsResources, rhsResources)) {
                return false;
            }
        }
        {
            Integer lhsConflictingMeetingCount;
            lhsConflictingMeetingCount = this.getConflictingMeetingCount();
            Integer rhsConflictingMeetingCount;
            rhsConflictingMeetingCount = that.getConflictingMeetingCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conflictingMeetingCount", lhsConflictingMeetingCount), LocatorUtils.property(thatLocator, "conflictingMeetingCount", rhsConflictingMeetingCount), lhsConflictingMeetingCount, rhsConflictingMeetingCount)) {
                return false;
            }
        }
        {
            Integer lhsAdjacentMeetingCount;
            lhsAdjacentMeetingCount = this.getAdjacentMeetingCount();
            Integer rhsAdjacentMeetingCount;
            rhsAdjacentMeetingCount = that.getAdjacentMeetingCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "adjacentMeetingCount", lhsAdjacentMeetingCount), LocatorUtils.property(thatLocator, "adjacentMeetingCount", rhsAdjacentMeetingCount), lhsAdjacentMeetingCount, rhsAdjacentMeetingCount)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfAllItemsType lhsConflictingMeetings;
            lhsConflictingMeetings = this.getConflictingMeetings();
            NonEmptyArrayOfAllItemsType rhsConflictingMeetings;
            rhsConflictingMeetings = that.getConflictingMeetings();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conflictingMeetings", lhsConflictingMeetings), LocatorUtils.property(thatLocator, "conflictingMeetings", rhsConflictingMeetings), lhsConflictingMeetings, rhsConflictingMeetings)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfAllItemsType lhsAdjacentMeetings;
            lhsAdjacentMeetings = this.getAdjacentMeetings();
            NonEmptyArrayOfAllItemsType rhsAdjacentMeetings;
            rhsAdjacentMeetings = that.getAdjacentMeetings();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "adjacentMeetings", lhsAdjacentMeetings), LocatorUtils.property(thatLocator, "adjacentMeetings", rhsAdjacentMeetings), lhsAdjacentMeetings, rhsAdjacentMeetings)) {
                return false;
            }
        }
        {
            String lhsDuration;
            lhsDuration = this.getDuration();
            String rhsDuration;
            rhsDuration = that.getDuration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "duration", lhsDuration), LocatorUtils.property(thatLocator, "duration", rhsDuration), lhsDuration, rhsDuration)) {
                return false;
            }
        }
        {
            String lhsTimeZone;
            lhsTimeZone = this.getTimeZone();
            String rhsTimeZone;
            rhsTimeZone = that.getTimeZone();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "timeZone", lhsTimeZone), LocatorUtils.property(thatLocator, "timeZone", rhsTimeZone), lhsTimeZone, rhsTimeZone)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsAppointmentReplyTime;
            lhsAppointmentReplyTime = this.getAppointmentReplyTime();
            XMLGregorianCalendar rhsAppointmentReplyTime;
            rhsAppointmentReplyTime = that.getAppointmentReplyTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "appointmentReplyTime", lhsAppointmentReplyTime), LocatorUtils.property(thatLocator, "appointmentReplyTime", rhsAppointmentReplyTime), lhsAppointmentReplyTime, rhsAppointmentReplyTime)) {
                return false;
            }
        }
        {
            Integer lhsAppointmentSequenceNumber;
            lhsAppointmentSequenceNumber = this.getAppointmentSequenceNumber();
            Integer rhsAppointmentSequenceNumber;
            rhsAppointmentSequenceNumber = that.getAppointmentSequenceNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "appointmentSequenceNumber", lhsAppointmentSequenceNumber), LocatorUtils.property(thatLocator, "appointmentSequenceNumber", rhsAppointmentSequenceNumber), lhsAppointmentSequenceNumber, rhsAppointmentSequenceNumber)) {
                return false;
            }
        }
        {
            Integer lhsAppointmentState;
            lhsAppointmentState = this.getAppointmentState();
            Integer rhsAppointmentState;
            rhsAppointmentState = that.getAppointmentState();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "appointmentState", lhsAppointmentState), LocatorUtils.property(thatLocator, "appointmentState", rhsAppointmentState), lhsAppointmentState, rhsAppointmentState)) {
                return false;
            }
        }
        {
            RecurrenceType lhsRecurrence;
            lhsRecurrence = this.getRecurrence();
            RecurrenceType rhsRecurrence;
            rhsRecurrence = that.getRecurrence();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recurrence", lhsRecurrence), LocatorUtils.property(thatLocator, "recurrence", rhsRecurrence), lhsRecurrence, rhsRecurrence)) {
                return false;
            }
        }
        {
            OccurrenceInfoType lhsFirstOccurrence;
            lhsFirstOccurrence = this.getFirstOccurrence();
            OccurrenceInfoType rhsFirstOccurrence;
            rhsFirstOccurrence = that.getFirstOccurrence();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "firstOccurrence", lhsFirstOccurrence), LocatorUtils.property(thatLocator, "firstOccurrence", rhsFirstOccurrence), lhsFirstOccurrence, rhsFirstOccurrence)) {
                return false;
            }
        }
        {
            OccurrenceInfoType lhsLastOccurrence;
            lhsLastOccurrence = this.getLastOccurrence();
            OccurrenceInfoType rhsLastOccurrence;
            rhsLastOccurrence = that.getLastOccurrence();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastOccurrence", lhsLastOccurrence), LocatorUtils.property(thatLocator, "lastOccurrence", rhsLastOccurrence), lhsLastOccurrence, rhsLastOccurrence)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfOccurrenceInfoType lhsModifiedOccurrences;
            lhsModifiedOccurrences = this.getModifiedOccurrences();
            NonEmptyArrayOfOccurrenceInfoType rhsModifiedOccurrences;
            rhsModifiedOccurrences = that.getModifiedOccurrences();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modifiedOccurrences", lhsModifiedOccurrences), LocatorUtils.property(thatLocator, "modifiedOccurrences", rhsModifiedOccurrences), lhsModifiedOccurrences, rhsModifiedOccurrences)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfDeletedOccurrencesType lhsDeletedOccurrences;
            lhsDeletedOccurrences = this.getDeletedOccurrences();
            NonEmptyArrayOfDeletedOccurrencesType rhsDeletedOccurrences;
            rhsDeletedOccurrences = that.getDeletedOccurrences();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deletedOccurrences", lhsDeletedOccurrences), LocatorUtils.property(thatLocator, "deletedOccurrences", rhsDeletedOccurrences), lhsDeletedOccurrences, rhsDeletedOccurrences)) {
                return false;
            }
        }
        {
            TimeZoneType lhsMeetingTimeZone;
            lhsMeetingTimeZone = this.getMeetingTimeZone();
            TimeZoneType rhsMeetingTimeZone;
            rhsMeetingTimeZone = that.getMeetingTimeZone();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "meetingTimeZone", lhsMeetingTimeZone), LocatorUtils.property(thatLocator, "meetingTimeZone", rhsMeetingTimeZone), lhsMeetingTimeZone, rhsMeetingTimeZone)) {
                return false;
            }
        }
        {
            Integer lhsConferenceType;
            lhsConferenceType = this.getConferenceType();
            Integer rhsConferenceType;
            rhsConferenceType = that.getConferenceType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conferenceType", lhsConferenceType), LocatorUtils.property(thatLocator, "conferenceType", rhsConferenceType), lhsConferenceType, rhsConferenceType)) {
                return false;
            }
        }
        {
            Boolean lhsAllowNewTimeProposal;
            lhsAllowNewTimeProposal = this.isAllowNewTimeProposal();
            Boolean rhsAllowNewTimeProposal;
            rhsAllowNewTimeProposal = that.isAllowNewTimeProposal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "allowNewTimeProposal", lhsAllowNewTimeProposal), LocatorUtils.property(thatLocator, "allowNewTimeProposal", rhsAllowNewTimeProposal), lhsAllowNewTimeProposal, rhsAllowNewTimeProposal)) {
                return false;
            }
        }
        {
            Boolean lhsIsOnlineMeeting;
            lhsIsOnlineMeeting = this.isIsOnlineMeeting();
            Boolean rhsIsOnlineMeeting;
            rhsIsOnlineMeeting = that.isIsOnlineMeeting();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isOnlineMeeting", lhsIsOnlineMeeting), LocatorUtils.property(thatLocator, "isOnlineMeeting", rhsIsOnlineMeeting), lhsIsOnlineMeeting, rhsIsOnlineMeeting)) {
                return false;
            }
        }
        {
            String lhsMeetingWorkspaceUrl;
            lhsMeetingWorkspaceUrl = this.getMeetingWorkspaceUrl();
            String rhsMeetingWorkspaceUrl;
            rhsMeetingWorkspaceUrl = that.getMeetingWorkspaceUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "meetingWorkspaceUrl", lhsMeetingWorkspaceUrl), LocatorUtils.property(thatLocator, "meetingWorkspaceUrl", rhsMeetingWorkspaceUrl), lhsMeetingWorkspaceUrl, rhsMeetingWorkspaceUrl)) {
                return false;
            }
        }
        {
            String lhsNetShowUrl;
            lhsNetShowUrl = this.getNetShowUrl();
            String rhsNetShowUrl;
            rhsNetShowUrl = that.getNetShowUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "netShowUrl", lhsNetShowUrl), LocatorUtils.property(thatLocator, "netShowUrl", rhsNetShowUrl), lhsNetShowUrl, rhsNetShowUrl)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MeetingRequestTypeType theMeetingRequestType;
            theMeetingRequestType = this.getMeetingRequestType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "meetingRequestType", theMeetingRequestType), currentHashCode, theMeetingRequestType);
        }
        {
            LegacyFreeBusyType theIntendedFreeBusyStatus;
            theIntendedFreeBusyStatus = this.getIntendedFreeBusyStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "intendedFreeBusyStatus", theIntendedFreeBusyStatus), currentHashCode, theIntendedFreeBusyStatus);
        }
        {
            XMLGregorianCalendar theStart;
            theStart = this.getStart();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "start", theStart), currentHashCode, theStart);
        }
        {
            XMLGregorianCalendar theEnd;
            theEnd = this.getEnd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "end", theEnd), currentHashCode, theEnd);
        }
        {
            XMLGregorianCalendar theOriginalStart;
            theOriginalStart = this.getOriginalStart();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originalStart", theOriginalStart), currentHashCode, theOriginalStart);
        }
        {
            Boolean theIsAllDayEvent;
            theIsAllDayEvent = this.isIsAllDayEvent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isAllDayEvent", theIsAllDayEvent), currentHashCode, theIsAllDayEvent);
        }
        {
            LegacyFreeBusyType theLegacyFreeBusyStatus;
            theLegacyFreeBusyStatus = this.getLegacyFreeBusyStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "legacyFreeBusyStatus", theLegacyFreeBusyStatus), currentHashCode, theLegacyFreeBusyStatus);
        }
        {
            String theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            String theWhen;
            theWhen = this.getWhen();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "when", theWhen), currentHashCode, theWhen);
        }
        {
            Boolean theIsMeeting;
            theIsMeeting = this.isIsMeeting();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isMeeting", theIsMeeting), currentHashCode, theIsMeeting);
        }
        {
            Boolean theIsCancelled;
            theIsCancelled = this.isIsCancelled();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isCancelled", theIsCancelled), currentHashCode, theIsCancelled);
        }
        {
            Boolean theIsRecurring;
            theIsRecurring = this.isIsRecurring();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isRecurring", theIsRecurring), currentHashCode, theIsRecurring);
        }
        {
            Boolean theMeetingRequestWasSent;
            theMeetingRequestWasSent = this.isMeetingRequestWasSent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "meetingRequestWasSent", theMeetingRequestWasSent), currentHashCode, theMeetingRequestWasSent);
        }
        {
            CalendarItemTypeType theCalendarItemType;
            theCalendarItemType = this.getCalendarItemType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "calendarItemType", theCalendarItemType), currentHashCode, theCalendarItemType);
        }
        {
            ResponseTypeType theMyResponseType;
            theMyResponseType = this.getMyResponseType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "myResponseType", theMyResponseType), currentHashCode, theMyResponseType);
        }
        {
            SingleRecipientType theOrganizer;
            theOrganizer = this.getOrganizer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "organizer", theOrganizer), currentHashCode, theOrganizer);
        }
        {
            NonEmptyArrayOfAttendeesType theRequiredAttendees;
            theRequiredAttendees = this.getRequiredAttendees();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requiredAttendees", theRequiredAttendees), currentHashCode, theRequiredAttendees);
        }
        {
            NonEmptyArrayOfAttendeesType theOptionalAttendees;
            theOptionalAttendees = this.getOptionalAttendees();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "optionalAttendees", theOptionalAttendees), currentHashCode, theOptionalAttendees);
        }
        {
            NonEmptyArrayOfAttendeesType theResources;
            theResources = this.getResources();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resources", theResources), currentHashCode, theResources);
        }
        {
            Integer theConflictingMeetingCount;
            theConflictingMeetingCount = this.getConflictingMeetingCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conflictingMeetingCount", theConflictingMeetingCount), currentHashCode, theConflictingMeetingCount);
        }
        {
            Integer theAdjacentMeetingCount;
            theAdjacentMeetingCount = this.getAdjacentMeetingCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "adjacentMeetingCount", theAdjacentMeetingCount), currentHashCode, theAdjacentMeetingCount);
        }
        {
            NonEmptyArrayOfAllItemsType theConflictingMeetings;
            theConflictingMeetings = this.getConflictingMeetings();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conflictingMeetings", theConflictingMeetings), currentHashCode, theConflictingMeetings);
        }
        {
            NonEmptyArrayOfAllItemsType theAdjacentMeetings;
            theAdjacentMeetings = this.getAdjacentMeetings();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "adjacentMeetings", theAdjacentMeetings), currentHashCode, theAdjacentMeetings);
        }
        {
            String theDuration;
            theDuration = this.getDuration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "duration", theDuration), currentHashCode, theDuration);
        }
        {
            String theTimeZone;
            theTimeZone = this.getTimeZone();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "timeZone", theTimeZone), currentHashCode, theTimeZone);
        }
        {
            XMLGregorianCalendar theAppointmentReplyTime;
            theAppointmentReplyTime = this.getAppointmentReplyTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appointmentReplyTime", theAppointmentReplyTime), currentHashCode, theAppointmentReplyTime);
        }
        {
            Integer theAppointmentSequenceNumber;
            theAppointmentSequenceNumber = this.getAppointmentSequenceNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appointmentSequenceNumber", theAppointmentSequenceNumber), currentHashCode, theAppointmentSequenceNumber);
        }
        {
            Integer theAppointmentState;
            theAppointmentState = this.getAppointmentState();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appointmentState", theAppointmentState), currentHashCode, theAppointmentState);
        }
        {
            RecurrenceType theRecurrence;
            theRecurrence = this.getRecurrence();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recurrence", theRecurrence), currentHashCode, theRecurrence);
        }
        {
            OccurrenceInfoType theFirstOccurrence;
            theFirstOccurrence = this.getFirstOccurrence();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "firstOccurrence", theFirstOccurrence), currentHashCode, theFirstOccurrence);
        }
        {
            OccurrenceInfoType theLastOccurrence;
            theLastOccurrence = this.getLastOccurrence();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastOccurrence", theLastOccurrence), currentHashCode, theLastOccurrence);
        }
        {
            NonEmptyArrayOfOccurrenceInfoType theModifiedOccurrences;
            theModifiedOccurrences = this.getModifiedOccurrences();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modifiedOccurrences", theModifiedOccurrences), currentHashCode, theModifiedOccurrences);
        }
        {
            NonEmptyArrayOfDeletedOccurrencesType theDeletedOccurrences;
            theDeletedOccurrences = this.getDeletedOccurrences();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deletedOccurrences", theDeletedOccurrences), currentHashCode, theDeletedOccurrences);
        }
        {
            TimeZoneType theMeetingTimeZone;
            theMeetingTimeZone = this.getMeetingTimeZone();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "meetingTimeZone", theMeetingTimeZone), currentHashCode, theMeetingTimeZone);
        }
        {
            Integer theConferenceType;
            theConferenceType = this.getConferenceType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conferenceType", theConferenceType), currentHashCode, theConferenceType);
        }
        {
            Boolean theAllowNewTimeProposal;
            theAllowNewTimeProposal = this.isAllowNewTimeProposal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "allowNewTimeProposal", theAllowNewTimeProposal), currentHashCode, theAllowNewTimeProposal);
        }
        {
            Boolean theIsOnlineMeeting;
            theIsOnlineMeeting = this.isIsOnlineMeeting();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isOnlineMeeting", theIsOnlineMeeting), currentHashCode, theIsOnlineMeeting);
        }
        {
            String theMeetingWorkspaceUrl;
            theMeetingWorkspaceUrl = this.getMeetingWorkspaceUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "meetingWorkspaceUrl", theMeetingWorkspaceUrl), currentHashCode, theMeetingWorkspaceUrl);
        }
        {
            String theNetShowUrl;
            theNetShowUrl = this.getNetShowUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "netShowUrl", theNetShowUrl), currentHashCode, theNetShowUrl);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
