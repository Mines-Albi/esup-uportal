//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.20 at 01:37:20 PM CEST 
//


package com.microsoft.exchange.messages;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.microsoft.exchange.types.CalendarItemUpdateOperationType;
import com.microsoft.exchange.types.ConflictResolutionType;
import com.microsoft.exchange.types.MessageDispositionType;
import com.microsoft.exchange.types.NonEmptyArrayOfItemChangesType;
import com.microsoft.exchange.types.TargetFolderIdType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for UpdateItemType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="UpdateItemType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/exchange/services/2006/messages}BaseRequestType">
 *       &lt;sequence>
 *         &lt;element name="SavedItemFolderId" type="{http://schemas.microsoft.com/exchange/services/2006/types}TargetFolderIdType" minOccurs="0"/>
 *         &lt;element name="ItemChanges" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfItemChangesType"/>
 *       &lt;/sequence>
 *       &lt;attribute name="ConflictResolution" use="required" type="{http://schemas.microsoft.com/exchange/services/2006/types}ConflictResolutionType" />
 *       &lt;attribute name="MessageDisposition" type="{http://schemas.microsoft.com/exchange/services/2006/types}MessageDispositionType" />
 *       &lt;attribute name="SendMeetingInvitationsOrCancellations" type="{http://schemas.microsoft.com/exchange/services/2006/types}CalendarItemUpdateOperationType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "UpdateItemType", propOrder = {
    "savedItemFolderId",
    "itemChanges"
})
@XmlRootElement(name = "UpdateItem")
public class UpdateItem
    extends BaseRequestType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "SavedItemFolderId")
    protected TargetFolderIdType savedItemFolderId;
    @XmlElement(name = "ItemChanges", required = true)
    protected NonEmptyArrayOfItemChangesType itemChanges;
    @XmlAttribute(name = "ConflictResolution", required = true)
    protected ConflictResolutionType conflictResolution;
    @XmlAttribute(name = "MessageDisposition")
    protected MessageDispositionType messageDisposition;
    @XmlAttribute(name = "SendMeetingInvitationsOrCancellations")
    protected CalendarItemUpdateOperationType sendMeetingInvitationsOrCancellations;

    /**
     * Gets the value of the savedItemFolderId property.
     * 
     * @return
     *     possible object is
     *     {@link TargetFolderIdType }
     *     
     */
    public TargetFolderIdType getSavedItemFolderId() {
        return savedItemFolderId;
    }

    /**
     * Sets the value of the savedItemFolderId property.
     * 
     * @param value
     *     allowed object is
     *     {@link TargetFolderIdType }
     *     
     */
    public void setSavedItemFolderId(TargetFolderIdType value) {
        this.savedItemFolderId = value;
    }

    /**
     * Gets the value of the itemChanges property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfItemChangesType }
     *     
     */
    public NonEmptyArrayOfItemChangesType getItemChanges() {
        return itemChanges;
    }

    /**
     * Sets the value of the itemChanges property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfItemChangesType }
     *     
     */
    public void setItemChanges(NonEmptyArrayOfItemChangesType value) {
        this.itemChanges = value;
    }

    /**
     * Gets the value of the conflictResolution property.
     * 
     * @return
     *     possible object is
     *     {@link ConflictResolutionType }
     *     
     */
    public ConflictResolutionType getConflictResolution() {
        return conflictResolution;
    }

    /**
     * Sets the value of the conflictResolution property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConflictResolutionType }
     *     
     */
    public void setConflictResolution(ConflictResolutionType value) {
        this.conflictResolution = value;
    }

    /**
     * Gets the value of the messageDisposition property.
     * 
     * @return
     *     possible object is
     *     {@link MessageDispositionType }
     *     
     */
    public MessageDispositionType getMessageDisposition() {
        return messageDisposition;
    }

    /**
     * Sets the value of the messageDisposition property.
     * 
     * @param value
     *     allowed object is
     *     {@link MessageDispositionType }
     *     
     */
    public void setMessageDisposition(MessageDispositionType value) {
        this.messageDisposition = value;
    }

    /**
     * Gets the value of the sendMeetingInvitationsOrCancellations property.
     * 
     * @return
     *     possible object is
     *     {@link CalendarItemUpdateOperationType }
     *     
     */
    public CalendarItemUpdateOperationType getSendMeetingInvitationsOrCancellations() {
        return sendMeetingInvitationsOrCancellations;
    }

    /**
     * Sets the value of the sendMeetingInvitationsOrCancellations property.
     * 
     * @param value
     *     allowed object is
     *     {@link CalendarItemUpdateOperationType }
     *     
     */
    public void setSendMeetingInvitationsOrCancellations(CalendarItemUpdateOperationType value) {
        this.sendMeetingInvitationsOrCancellations = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            TargetFolderIdType theSavedItemFolderId;
            theSavedItemFolderId = this.getSavedItemFolderId();
            strategy.appendField(locator, this, "savedItemFolderId", buffer, theSavedItemFolderId);
        }
        {
            NonEmptyArrayOfItemChangesType theItemChanges;
            theItemChanges = this.getItemChanges();
            strategy.appendField(locator, this, "itemChanges", buffer, theItemChanges);
        }
        {
            ConflictResolutionType theConflictResolution;
            theConflictResolution = this.getConflictResolution();
            strategy.appendField(locator, this, "conflictResolution", buffer, theConflictResolution);
        }
        {
            MessageDispositionType theMessageDisposition;
            theMessageDisposition = this.getMessageDisposition();
            strategy.appendField(locator, this, "messageDisposition", buffer, theMessageDisposition);
        }
        {
            CalendarItemUpdateOperationType theSendMeetingInvitationsOrCancellations;
            theSendMeetingInvitationsOrCancellations = this.getSendMeetingInvitationsOrCancellations();
            strategy.appendField(locator, this, "sendMeetingInvitationsOrCancellations", buffer, theSendMeetingInvitationsOrCancellations);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof UpdateItem)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final UpdateItem that = ((UpdateItem) object);
        {
            TargetFolderIdType lhsSavedItemFolderId;
            lhsSavedItemFolderId = this.getSavedItemFolderId();
            TargetFolderIdType rhsSavedItemFolderId;
            rhsSavedItemFolderId = that.getSavedItemFolderId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "savedItemFolderId", lhsSavedItemFolderId), LocatorUtils.property(thatLocator, "savedItemFolderId", rhsSavedItemFolderId), lhsSavedItemFolderId, rhsSavedItemFolderId)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfItemChangesType lhsItemChanges;
            lhsItemChanges = this.getItemChanges();
            NonEmptyArrayOfItemChangesType rhsItemChanges;
            rhsItemChanges = that.getItemChanges();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemChanges", lhsItemChanges), LocatorUtils.property(thatLocator, "itemChanges", rhsItemChanges), lhsItemChanges, rhsItemChanges)) {
                return false;
            }
        }
        {
            ConflictResolutionType lhsConflictResolution;
            lhsConflictResolution = this.getConflictResolution();
            ConflictResolutionType rhsConflictResolution;
            rhsConflictResolution = that.getConflictResolution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conflictResolution", lhsConflictResolution), LocatorUtils.property(thatLocator, "conflictResolution", rhsConflictResolution), lhsConflictResolution, rhsConflictResolution)) {
                return false;
            }
        }
        {
            MessageDispositionType lhsMessageDisposition;
            lhsMessageDisposition = this.getMessageDisposition();
            MessageDispositionType rhsMessageDisposition;
            rhsMessageDisposition = that.getMessageDisposition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "messageDisposition", lhsMessageDisposition), LocatorUtils.property(thatLocator, "messageDisposition", rhsMessageDisposition), lhsMessageDisposition, rhsMessageDisposition)) {
                return false;
            }
        }
        {
            CalendarItemUpdateOperationType lhsSendMeetingInvitationsOrCancellations;
            lhsSendMeetingInvitationsOrCancellations = this.getSendMeetingInvitationsOrCancellations();
            CalendarItemUpdateOperationType rhsSendMeetingInvitationsOrCancellations;
            rhsSendMeetingInvitationsOrCancellations = that.getSendMeetingInvitationsOrCancellations();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sendMeetingInvitationsOrCancellations", lhsSendMeetingInvitationsOrCancellations), LocatorUtils.property(thatLocator, "sendMeetingInvitationsOrCancellations", rhsSendMeetingInvitationsOrCancellations), lhsSendMeetingInvitationsOrCancellations, rhsSendMeetingInvitationsOrCancellations)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            TargetFolderIdType theSavedItemFolderId;
            theSavedItemFolderId = this.getSavedItemFolderId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "savedItemFolderId", theSavedItemFolderId), currentHashCode, theSavedItemFolderId);
        }
        {
            NonEmptyArrayOfItemChangesType theItemChanges;
            theItemChanges = this.getItemChanges();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemChanges", theItemChanges), currentHashCode, theItemChanges);
        }
        {
            ConflictResolutionType theConflictResolution;
            theConflictResolution = this.getConflictResolution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conflictResolution", theConflictResolution), currentHashCode, theConflictResolution);
        }
        {
            MessageDispositionType theMessageDisposition;
            theMessageDisposition = this.getMessageDisposition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "messageDisposition", theMessageDisposition), currentHashCode, theMessageDisposition);
        }
        {
            CalendarItemUpdateOperationType theSendMeetingInvitationsOrCancellations;
            theSendMeetingInvitationsOrCancellations = this.getSendMeetingInvitationsOrCancellations();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sendMeetingInvitationsOrCancellations", theSendMeetingInvitationsOrCancellations), currentHashCode, theSendMeetingInvitationsOrCancellations);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
