//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.18 at 02:30:12 PM CEST 
//


package com.microsoft.exchange.types;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Compound property for Managed Folder related information for Managed Folders.
 * 
 * <p>Java class for ManagedFolderInformationType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ManagedFolderInformationType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="CanDelete" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="CanRenameOrMove" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="MustDisplayComment" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="HasQuota" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="IsManagedFoldersRoot" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="ManagedFolderId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="Comment" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="StorageQuota" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="FolderSize" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *         &lt;element name="HomePage" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ManagedFolderInformationType", propOrder = {
    "canDelete",
    "canRenameOrMove",
    "mustDisplayComment",
    "hasQuota",
    "isManagedFoldersRoot",
    "managedFolderId",
    "comment",
    "storageQuota",
    "folderSize",
    "homePage"
})
public class ManagedFolderInformationType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "CanDelete")
    protected Boolean canDelete;
    @XmlElement(name = "CanRenameOrMove")
    protected Boolean canRenameOrMove;
    @XmlElement(name = "MustDisplayComment")
    protected Boolean mustDisplayComment;
    @XmlElement(name = "HasQuota")
    protected Boolean hasQuota;
    @XmlElement(name = "IsManagedFoldersRoot")
    protected Boolean isManagedFoldersRoot;
    @XmlElement(name = "ManagedFolderId")
    protected String managedFolderId;
    @XmlElement(name = "Comment")
    protected String comment;
    @XmlElement(name = "StorageQuota")
    protected Integer storageQuota;
    @XmlElement(name = "FolderSize")
    protected Integer folderSize;
    @XmlElement(name = "HomePage")
    protected String homePage;

    /**
     * Gets the value of the canDelete property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isCanDelete() {
        return canDelete;
    }

    /**
     * Sets the value of the canDelete property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setCanDelete(Boolean value) {
        this.canDelete = value;
    }

    /**
     * Gets the value of the canRenameOrMove property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isCanRenameOrMove() {
        return canRenameOrMove;
    }

    /**
     * Sets the value of the canRenameOrMove property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setCanRenameOrMove(Boolean value) {
        this.canRenameOrMove = value;
    }

    /**
     * Gets the value of the mustDisplayComment property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isMustDisplayComment() {
        return mustDisplayComment;
    }

    /**
     * Sets the value of the mustDisplayComment property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setMustDisplayComment(Boolean value) {
        this.mustDisplayComment = value;
    }

    /**
     * Gets the value of the hasQuota property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isHasQuota() {
        return hasQuota;
    }

    /**
     * Sets the value of the hasQuota property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setHasQuota(Boolean value) {
        this.hasQuota = value;
    }

    /**
     * Gets the value of the isManagedFoldersRoot property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIsManagedFoldersRoot() {
        return isManagedFoldersRoot;
    }

    /**
     * Sets the value of the isManagedFoldersRoot property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsManagedFoldersRoot(Boolean value) {
        this.isManagedFoldersRoot = value;
    }

    /**
     * Gets the value of the managedFolderId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getManagedFolderId() {
        return managedFolderId;
    }

    /**
     * Sets the value of the managedFolderId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setManagedFolderId(String value) {
        this.managedFolderId = value;
    }

    /**
     * Gets the value of the comment property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getComment() {
        return comment;
    }

    /**
     * Sets the value of the comment property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setComment(String value) {
        this.comment = value;
    }

    /**
     * Gets the value of the storageQuota property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getStorageQuota() {
        return storageQuota;
    }

    /**
     * Sets the value of the storageQuota property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setStorageQuota(Integer value) {
        this.storageQuota = value;
    }

    /**
     * Gets the value of the folderSize property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getFolderSize() {
        return folderSize;
    }

    /**
     * Sets the value of the folderSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setFolderSize(Integer value) {
        this.folderSize = value;
    }

    /**
     * Gets the value of the homePage property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHomePage() {
        return homePage;
    }

    /**
     * Sets the value of the homePage property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHomePage(String value) {
        this.homePage = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Boolean theCanDelete;
            theCanDelete = this.isCanDelete();
            strategy.appendField(locator, this, "canDelete", buffer, theCanDelete);
        }
        {
            Boolean theCanRenameOrMove;
            theCanRenameOrMove = this.isCanRenameOrMove();
            strategy.appendField(locator, this, "canRenameOrMove", buffer, theCanRenameOrMove);
        }
        {
            Boolean theMustDisplayComment;
            theMustDisplayComment = this.isMustDisplayComment();
            strategy.appendField(locator, this, "mustDisplayComment", buffer, theMustDisplayComment);
        }
        {
            Boolean theHasQuota;
            theHasQuota = this.isHasQuota();
            strategy.appendField(locator, this, "hasQuota", buffer, theHasQuota);
        }
        {
            Boolean theIsManagedFoldersRoot;
            theIsManagedFoldersRoot = this.isIsManagedFoldersRoot();
            strategy.appendField(locator, this, "isManagedFoldersRoot", buffer, theIsManagedFoldersRoot);
        }
        {
            String theManagedFolderId;
            theManagedFolderId = this.getManagedFolderId();
            strategy.appendField(locator, this, "managedFolderId", buffer, theManagedFolderId);
        }
        {
            String theComment;
            theComment = this.getComment();
            strategy.appendField(locator, this, "comment", buffer, theComment);
        }
        {
            Integer theStorageQuota;
            theStorageQuota = this.getStorageQuota();
            strategy.appendField(locator, this, "storageQuota", buffer, theStorageQuota);
        }
        {
            Integer theFolderSize;
            theFolderSize = this.getFolderSize();
            strategy.appendField(locator, this, "folderSize", buffer, theFolderSize);
        }
        {
            String theHomePage;
            theHomePage = this.getHomePage();
            strategy.appendField(locator, this, "homePage", buffer, theHomePage);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ManagedFolderInformationType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ManagedFolderInformationType that = ((ManagedFolderInformationType) object);
        {
            Boolean lhsCanDelete;
            lhsCanDelete = this.isCanDelete();
            Boolean rhsCanDelete;
            rhsCanDelete = that.isCanDelete();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "canDelete", lhsCanDelete), LocatorUtils.property(thatLocator, "canDelete", rhsCanDelete), lhsCanDelete, rhsCanDelete)) {
                return false;
            }
        }
        {
            Boolean lhsCanRenameOrMove;
            lhsCanRenameOrMove = this.isCanRenameOrMove();
            Boolean rhsCanRenameOrMove;
            rhsCanRenameOrMove = that.isCanRenameOrMove();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "canRenameOrMove", lhsCanRenameOrMove), LocatorUtils.property(thatLocator, "canRenameOrMove", rhsCanRenameOrMove), lhsCanRenameOrMove, rhsCanRenameOrMove)) {
                return false;
            }
        }
        {
            Boolean lhsMustDisplayComment;
            lhsMustDisplayComment = this.isMustDisplayComment();
            Boolean rhsMustDisplayComment;
            rhsMustDisplayComment = that.isMustDisplayComment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mustDisplayComment", lhsMustDisplayComment), LocatorUtils.property(thatLocator, "mustDisplayComment", rhsMustDisplayComment), lhsMustDisplayComment, rhsMustDisplayComment)) {
                return false;
            }
        }
        {
            Boolean lhsHasQuota;
            lhsHasQuota = this.isHasQuota();
            Boolean rhsHasQuota;
            rhsHasQuota = that.isHasQuota();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hasQuota", lhsHasQuota), LocatorUtils.property(thatLocator, "hasQuota", rhsHasQuota), lhsHasQuota, rhsHasQuota)) {
                return false;
            }
        }
        {
            Boolean lhsIsManagedFoldersRoot;
            lhsIsManagedFoldersRoot = this.isIsManagedFoldersRoot();
            Boolean rhsIsManagedFoldersRoot;
            rhsIsManagedFoldersRoot = that.isIsManagedFoldersRoot();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isManagedFoldersRoot", lhsIsManagedFoldersRoot), LocatorUtils.property(thatLocator, "isManagedFoldersRoot", rhsIsManagedFoldersRoot), lhsIsManagedFoldersRoot, rhsIsManagedFoldersRoot)) {
                return false;
            }
        }
        {
            String lhsManagedFolderId;
            lhsManagedFolderId = this.getManagedFolderId();
            String rhsManagedFolderId;
            rhsManagedFolderId = that.getManagedFolderId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "managedFolderId", lhsManagedFolderId), LocatorUtils.property(thatLocator, "managedFolderId", rhsManagedFolderId), lhsManagedFolderId, rhsManagedFolderId)) {
                return false;
            }
        }
        {
            String lhsComment;
            lhsComment = this.getComment();
            String rhsComment;
            rhsComment = that.getComment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "comment", lhsComment), LocatorUtils.property(thatLocator, "comment", rhsComment), lhsComment, rhsComment)) {
                return false;
            }
        }
        {
            Integer lhsStorageQuota;
            lhsStorageQuota = this.getStorageQuota();
            Integer rhsStorageQuota;
            rhsStorageQuota = that.getStorageQuota();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "storageQuota", lhsStorageQuota), LocatorUtils.property(thatLocator, "storageQuota", rhsStorageQuota), lhsStorageQuota, rhsStorageQuota)) {
                return false;
            }
        }
        {
            Integer lhsFolderSize;
            lhsFolderSize = this.getFolderSize();
            Integer rhsFolderSize;
            rhsFolderSize = that.getFolderSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "folderSize", lhsFolderSize), LocatorUtils.property(thatLocator, "folderSize", rhsFolderSize), lhsFolderSize, rhsFolderSize)) {
                return false;
            }
        }
        {
            String lhsHomePage;
            lhsHomePage = this.getHomePage();
            String rhsHomePage;
            rhsHomePage = that.getHomePage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "homePage", lhsHomePage), LocatorUtils.property(thatLocator, "homePage", rhsHomePage), lhsHomePage, rhsHomePage)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Boolean theCanDelete;
            theCanDelete = this.isCanDelete();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "canDelete", theCanDelete), currentHashCode, theCanDelete);
        }
        {
            Boolean theCanRenameOrMove;
            theCanRenameOrMove = this.isCanRenameOrMove();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "canRenameOrMove", theCanRenameOrMove), currentHashCode, theCanRenameOrMove);
        }
        {
            Boolean theMustDisplayComment;
            theMustDisplayComment = this.isMustDisplayComment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mustDisplayComment", theMustDisplayComment), currentHashCode, theMustDisplayComment);
        }
        {
            Boolean theHasQuota;
            theHasQuota = this.isHasQuota();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hasQuota", theHasQuota), currentHashCode, theHasQuota);
        }
        {
            Boolean theIsManagedFoldersRoot;
            theIsManagedFoldersRoot = this.isIsManagedFoldersRoot();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isManagedFoldersRoot", theIsManagedFoldersRoot), currentHashCode, theIsManagedFoldersRoot);
        }
        {
            String theManagedFolderId;
            theManagedFolderId = this.getManagedFolderId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "managedFolderId", theManagedFolderId), currentHashCode, theManagedFolderId);
        }
        {
            String theComment;
            theComment = this.getComment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comment", theComment), currentHashCode, theComment);
        }
        {
            Integer theStorageQuota;
            theStorageQuota = this.getStorageQuota();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "storageQuota", theStorageQuota), currentHashCode, theStorageQuota);
        }
        {
            Integer theFolderSize;
            theFolderSize = this.getFolderSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "folderSize", theFolderSize), currentHashCode, theFolderSize);
        }
        {
            String theHomePage;
            theHomePage = this.getHomePage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "homePage", theHomePage), currentHashCode, theHomePage);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
