//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.20 at 01:37:20 PM CEST 
//


package com.microsoft.exchange.types;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for GroupAttendeeConflictData complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="GroupAttendeeConflictData">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/exchange/services/2006/types}AttendeeConflictData">
 *       &lt;sequence>
 *         &lt;element name="NumberOfMembers" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="NumberOfMembersAvailable" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="NumberOfMembersWithConflict" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="NumberOfMembersWithNoData" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GroupAttendeeConflictData", propOrder = {
    "numberOfMembers",
    "numberOfMembersAvailable",
    "numberOfMembersWithConflict",
    "numberOfMembersWithNoData"
})
public class GroupAttendeeConflictData
    extends AttendeeConflictData
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "NumberOfMembers")
    protected int numberOfMembers;
    @XmlElement(name = "NumberOfMembersAvailable")
    protected int numberOfMembersAvailable;
    @XmlElement(name = "NumberOfMembersWithConflict")
    protected int numberOfMembersWithConflict;
    @XmlElement(name = "NumberOfMembersWithNoData")
    protected int numberOfMembersWithNoData;

    /**
     * Gets the value of the numberOfMembers property.
     * 
     */
    public int getNumberOfMembers() {
        return numberOfMembers;
    }

    /**
     * Sets the value of the numberOfMembers property.
     * 
     */
    public void setNumberOfMembers(int value) {
        this.numberOfMembers = value;
    }

    /**
     * Gets the value of the numberOfMembersAvailable property.
     * 
     */
    public int getNumberOfMembersAvailable() {
        return numberOfMembersAvailable;
    }

    /**
     * Sets the value of the numberOfMembersAvailable property.
     * 
     */
    public void setNumberOfMembersAvailable(int value) {
        this.numberOfMembersAvailable = value;
    }

    /**
     * Gets the value of the numberOfMembersWithConflict property.
     * 
     */
    public int getNumberOfMembersWithConflict() {
        return numberOfMembersWithConflict;
    }

    /**
     * Sets the value of the numberOfMembersWithConflict property.
     * 
     */
    public void setNumberOfMembersWithConflict(int value) {
        this.numberOfMembersWithConflict = value;
    }

    /**
     * Gets the value of the numberOfMembersWithNoData property.
     * 
     */
    public int getNumberOfMembersWithNoData() {
        return numberOfMembersWithNoData;
    }

    /**
     * Sets the value of the numberOfMembersWithNoData property.
     * 
     */
    public void setNumberOfMembersWithNoData(int value) {
        this.numberOfMembersWithNoData = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            int theNumberOfMembers;
            theNumberOfMembers = this.getNumberOfMembers();
            strategy.appendField(locator, this, "numberOfMembers", buffer, theNumberOfMembers);
        }
        {
            int theNumberOfMembersAvailable;
            theNumberOfMembersAvailable = this.getNumberOfMembersAvailable();
            strategy.appendField(locator, this, "numberOfMembersAvailable", buffer, theNumberOfMembersAvailable);
        }
        {
            int theNumberOfMembersWithConflict;
            theNumberOfMembersWithConflict = this.getNumberOfMembersWithConflict();
            strategy.appendField(locator, this, "numberOfMembersWithConflict", buffer, theNumberOfMembersWithConflict);
        }
        {
            int theNumberOfMembersWithNoData;
            theNumberOfMembersWithNoData = this.getNumberOfMembersWithNoData();
            strategy.appendField(locator, this, "numberOfMembersWithNoData", buffer, theNumberOfMembersWithNoData);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof GroupAttendeeConflictData)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final GroupAttendeeConflictData that = ((GroupAttendeeConflictData) object);
        {
            int lhsNumberOfMembers;
            lhsNumberOfMembers = this.getNumberOfMembers();
            int rhsNumberOfMembers;
            rhsNumberOfMembers = that.getNumberOfMembers();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfMembers", lhsNumberOfMembers), LocatorUtils.property(thatLocator, "numberOfMembers", rhsNumberOfMembers), lhsNumberOfMembers, rhsNumberOfMembers)) {
                return false;
            }
        }
        {
            int lhsNumberOfMembersAvailable;
            lhsNumberOfMembersAvailable = this.getNumberOfMembersAvailable();
            int rhsNumberOfMembersAvailable;
            rhsNumberOfMembersAvailable = that.getNumberOfMembersAvailable();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfMembersAvailable", lhsNumberOfMembersAvailable), LocatorUtils.property(thatLocator, "numberOfMembersAvailable", rhsNumberOfMembersAvailable), lhsNumberOfMembersAvailable, rhsNumberOfMembersAvailable)) {
                return false;
            }
        }
        {
            int lhsNumberOfMembersWithConflict;
            lhsNumberOfMembersWithConflict = this.getNumberOfMembersWithConflict();
            int rhsNumberOfMembersWithConflict;
            rhsNumberOfMembersWithConflict = that.getNumberOfMembersWithConflict();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfMembersWithConflict", lhsNumberOfMembersWithConflict), LocatorUtils.property(thatLocator, "numberOfMembersWithConflict", rhsNumberOfMembersWithConflict), lhsNumberOfMembersWithConflict, rhsNumberOfMembersWithConflict)) {
                return false;
            }
        }
        {
            int lhsNumberOfMembersWithNoData;
            lhsNumberOfMembersWithNoData = this.getNumberOfMembersWithNoData();
            int rhsNumberOfMembersWithNoData;
            rhsNumberOfMembersWithNoData = that.getNumberOfMembersWithNoData();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfMembersWithNoData", lhsNumberOfMembersWithNoData), LocatorUtils.property(thatLocator, "numberOfMembersWithNoData", rhsNumberOfMembersWithNoData), lhsNumberOfMembersWithNoData, rhsNumberOfMembersWithNoData)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            int theNumberOfMembers;
            theNumberOfMembers = this.getNumberOfMembers();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfMembers", theNumberOfMembers), currentHashCode, theNumberOfMembers);
        }
        {
            int theNumberOfMembersAvailable;
            theNumberOfMembersAvailable = this.getNumberOfMembersAvailable();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfMembersAvailable", theNumberOfMembersAvailable), currentHashCode, theNumberOfMembersAvailable);
        }
        {
            int theNumberOfMembersWithConflict;
            theNumberOfMembersWithConflict = this.getNumberOfMembersWithConflict();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfMembersWithConflict", theNumberOfMembersWithConflict), currentHashCode, theNumberOfMembersWithConflict);
        }
        {
            int theNumberOfMembersWithNoData;
            theNumberOfMembersWithNoData = this.getNumberOfMembersWithNoData();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfMembersWithNoData", theNumberOfMembersWithNoData), currentHashCode, theNumberOfMembersWithNoData);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
