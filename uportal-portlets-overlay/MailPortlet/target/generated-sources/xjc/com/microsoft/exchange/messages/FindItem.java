//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.20 at 01:37:20 PM CEST 
//


package com.microsoft.exchange.messages;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.microsoft.exchange.types.CalendarViewType;
import com.microsoft.exchange.types.ContactsViewType;
import com.microsoft.exchange.types.DistinguishedGroupByType;
import com.microsoft.exchange.types.FractionalPageViewType;
import com.microsoft.exchange.types.GroupByType;
import com.microsoft.exchange.types.IndexedPageViewType;
import com.microsoft.exchange.types.ItemQueryTraversalType;
import com.microsoft.exchange.types.ItemResponseShapeType;
import com.microsoft.exchange.types.NonEmptyArrayOfBaseFolderIdsType;
import com.microsoft.exchange.types.NonEmptyArrayOfFieldOrdersType;
import com.microsoft.exchange.types.RestrictionType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for FindItemType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FindItemType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/exchange/services/2006/messages}BaseRequestType">
 *       &lt;sequence>
 *         &lt;element name="ItemShape" type="{http://schemas.microsoft.com/exchange/services/2006/types}ItemResponseShapeType"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="IndexedPageItemView" type="{http://schemas.microsoft.com/exchange/services/2006/types}IndexedPageViewType"/>
 *           &lt;element name="FractionalPageItemView" type="{http://schemas.microsoft.com/exchange/services/2006/types}FractionalPageViewType"/>
 *           &lt;element name="CalendarView" type="{http://schemas.microsoft.com/exchange/services/2006/types}CalendarViewType"/>
 *           &lt;element name="ContactsView" type="{http://schemas.microsoft.com/exchange/services/2006/types}ContactsViewType"/>
 *         &lt;/choice>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="GroupBy" type="{http://schemas.microsoft.com/exchange/services/2006/types}GroupByType"/>
 *           &lt;element name="DistinguishedGroupBy" type="{http://schemas.microsoft.com/exchange/services/2006/types}DistinguishedGroupByType"/>
 *         &lt;/choice>
 *         &lt;element name="Restriction" type="{http://schemas.microsoft.com/exchange/services/2006/types}RestrictionType" minOccurs="0"/>
 *         &lt;element name="SortOrder" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfFieldOrdersType" minOccurs="0"/>
 *         &lt;element name="ParentFolderIds" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfBaseFolderIdsType"/>
 *       &lt;/sequence>
 *       &lt;attribute name="Traversal" use="required" type="{http://schemas.microsoft.com/exchange/services/2006/types}ItemQueryTraversalType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FindItemType", propOrder = {
    "itemShape",
    "contactsView",
    "calendarView",
    "fractionalPageItemView",
    "indexedPageItemView",
    "distinguishedGroupBy",
    "groupBy",
    "restriction",
    "sortOrder",
    "parentFolderIds"
})
@XmlRootElement(name = "FindItem")
public class FindItem
    extends BaseRequestType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "ItemShape", required = true)
    protected ItemResponseShapeType itemShape;
    @XmlElement(name = "ContactsView")
    protected ContactsViewType contactsView;
    @XmlElement(name = "CalendarView")
    protected CalendarViewType calendarView;
    @XmlElement(name = "FractionalPageItemView")
    protected FractionalPageViewType fractionalPageItemView;
    @XmlElement(name = "IndexedPageItemView")
    protected IndexedPageViewType indexedPageItemView;
    @XmlElement(name = "DistinguishedGroupBy")
    protected DistinguishedGroupByType distinguishedGroupBy;
    @XmlElement(name = "GroupBy")
    protected GroupByType groupBy;
    @XmlElement(name = "Restriction")
    protected RestrictionType restriction;
    @XmlElement(name = "SortOrder")
    protected NonEmptyArrayOfFieldOrdersType sortOrder;
    @XmlElement(name = "ParentFolderIds", required = true)
    protected NonEmptyArrayOfBaseFolderIdsType parentFolderIds;
    @XmlAttribute(name = "Traversal", required = true)
    protected ItemQueryTraversalType traversal;

    /**
     * Gets the value of the itemShape property.
     * 
     * @return
     *     possible object is
     *     {@link ItemResponseShapeType }
     *     
     */
    public ItemResponseShapeType getItemShape() {
        return itemShape;
    }

    /**
     * Sets the value of the itemShape property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemResponseShapeType }
     *     
     */
    public void setItemShape(ItemResponseShapeType value) {
        this.itemShape = value;
    }

    /**
     * Gets the value of the contactsView property.
     * 
     * @return
     *     possible object is
     *     {@link ContactsViewType }
     *     
     */
    public ContactsViewType getContactsView() {
        return contactsView;
    }

    /**
     * Sets the value of the contactsView property.
     * 
     * @param value
     *     allowed object is
     *     {@link ContactsViewType }
     *     
     */
    public void setContactsView(ContactsViewType value) {
        this.contactsView = value;
    }

    /**
     * Gets the value of the calendarView property.
     * 
     * @return
     *     possible object is
     *     {@link CalendarViewType }
     *     
     */
    public CalendarViewType getCalendarView() {
        return calendarView;
    }

    /**
     * Sets the value of the calendarView property.
     * 
     * @param value
     *     allowed object is
     *     {@link CalendarViewType }
     *     
     */
    public void setCalendarView(CalendarViewType value) {
        this.calendarView = value;
    }

    /**
     * Gets the value of the fractionalPageItemView property.
     * 
     * @return
     *     possible object is
     *     {@link FractionalPageViewType }
     *     
     */
    public FractionalPageViewType getFractionalPageItemView() {
        return fractionalPageItemView;
    }

    /**
     * Sets the value of the fractionalPageItemView property.
     * 
     * @param value
     *     allowed object is
     *     {@link FractionalPageViewType }
     *     
     */
    public void setFractionalPageItemView(FractionalPageViewType value) {
        this.fractionalPageItemView = value;
    }

    /**
     * Gets the value of the indexedPageItemView property.
     * 
     * @return
     *     possible object is
     *     {@link IndexedPageViewType }
     *     
     */
    public IndexedPageViewType getIndexedPageItemView() {
        return indexedPageItemView;
    }

    /**
     * Sets the value of the indexedPageItemView property.
     * 
     * @param value
     *     allowed object is
     *     {@link IndexedPageViewType }
     *     
     */
    public void setIndexedPageItemView(IndexedPageViewType value) {
        this.indexedPageItemView = value;
    }

    /**
     * Gets the value of the distinguishedGroupBy property.
     * 
     * @return
     *     possible object is
     *     {@link DistinguishedGroupByType }
     *     
     */
    public DistinguishedGroupByType getDistinguishedGroupBy() {
        return distinguishedGroupBy;
    }

    /**
     * Sets the value of the distinguishedGroupBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link DistinguishedGroupByType }
     *     
     */
    public void setDistinguishedGroupBy(DistinguishedGroupByType value) {
        this.distinguishedGroupBy = value;
    }

    /**
     * Gets the value of the groupBy property.
     * 
     * @return
     *     possible object is
     *     {@link GroupByType }
     *     
     */
    public GroupByType getGroupBy() {
        return groupBy;
    }

    /**
     * Sets the value of the groupBy property.
     * 
     * @param value
     *     allowed object is
     *     {@link GroupByType }
     *     
     */
    public void setGroupBy(GroupByType value) {
        this.groupBy = value;
    }

    /**
     * Gets the value of the restriction property.
     * 
     * @return
     *     possible object is
     *     {@link RestrictionType }
     *     
     */
    public RestrictionType getRestriction() {
        return restriction;
    }

    /**
     * Sets the value of the restriction property.
     * 
     * @param value
     *     allowed object is
     *     {@link RestrictionType }
     *     
     */
    public void setRestriction(RestrictionType value) {
        this.restriction = value;
    }

    /**
     * Gets the value of the sortOrder property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfFieldOrdersType }
     *     
     */
    public NonEmptyArrayOfFieldOrdersType getSortOrder() {
        return sortOrder;
    }

    /**
     * Sets the value of the sortOrder property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfFieldOrdersType }
     *     
     */
    public void setSortOrder(NonEmptyArrayOfFieldOrdersType value) {
        this.sortOrder = value;
    }

    /**
     * Gets the value of the parentFolderIds property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfBaseFolderIdsType }
     *     
     */
    public NonEmptyArrayOfBaseFolderIdsType getParentFolderIds() {
        return parentFolderIds;
    }

    /**
     * Sets the value of the parentFolderIds property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfBaseFolderIdsType }
     *     
     */
    public void setParentFolderIds(NonEmptyArrayOfBaseFolderIdsType value) {
        this.parentFolderIds = value;
    }

    /**
     * Gets the value of the traversal property.
     * 
     * @return
     *     possible object is
     *     {@link ItemQueryTraversalType }
     *     
     */
    public ItemQueryTraversalType getTraversal() {
        return traversal;
    }

    /**
     * Sets the value of the traversal property.
     * 
     * @param value
     *     allowed object is
     *     {@link ItemQueryTraversalType }
     *     
     */
    public void setTraversal(ItemQueryTraversalType value) {
        this.traversal = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            ItemResponseShapeType theItemShape;
            theItemShape = this.getItemShape();
            strategy.appendField(locator, this, "itemShape", buffer, theItemShape);
        }
        {
            ContactsViewType theContactsView;
            theContactsView = this.getContactsView();
            strategy.appendField(locator, this, "contactsView", buffer, theContactsView);
        }
        {
            CalendarViewType theCalendarView;
            theCalendarView = this.getCalendarView();
            strategy.appendField(locator, this, "calendarView", buffer, theCalendarView);
        }
        {
            FractionalPageViewType theFractionalPageItemView;
            theFractionalPageItemView = this.getFractionalPageItemView();
            strategy.appendField(locator, this, "fractionalPageItemView", buffer, theFractionalPageItemView);
        }
        {
            IndexedPageViewType theIndexedPageItemView;
            theIndexedPageItemView = this.getIndexedPageItemView();
            strategy.appendField(locator, this, "indexedPageItemView", buffer, theIndexedPageItemView);
        }
        {
            DistinguishedGroupByType theDistinguishedGroupBy;
            theDistinguishedGroupBy = this.getDistinguishedGroupBy();
            strategy.appendField(locator, this, "distinguishedGroupBy", buffer, theDistinguishedGroupBy);
        }
        {
            GroupByType theGroupBy;
            theGroupBy = this.getGroupBy();
            strategy.appendField(locator, this, "groupBy", buffer, theGroupBy);
        }
        {
            RestrictionType theRestriction;
            theRestriction = this.getRestriction();
            strategy.appendField(locator, this, "restriction", buffer, theRestriction);
        }
        {
            NonEmptyArrayOfFieldOrdersType theSortOrder;
            theSortOrder = this.getSortOrder();
            strategy.appendField(locator, this, "sortOrder", buffer, theSortOrder);
        }
        {
            NonEmptyArrayOfBaseFolderIdsType theParentFolderIds;
            theParentFolderIds = this.getParentFolderIds();
            strategy.appendField(locator, this, "parentFolderIds", buffer, theParentFolderIds);
        }
        {
            ItemQueryTraversalType theTraversal;
            theTraversal = this.getTraversal();
            strategy.appendField(locator, this, "traversal", buffer, theTraversal);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FindItem)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final FindItem that = ((FindItem) object);
        {
            ItemResponseShapeType lhsItemShape;
            lhsItemShape = this.getItemShape();
            ItemResponseShapeType rhsItemShape;
            rhsItemShape = that.getItemShape();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemShape", lhsItemShape), LocatorUtils.property(thatLocator, "itemShape", rhsItemShape), lhsItemShape, rhsItemShape)) {
                return false;
            }
        }
        {
            ContactsViewType lhsContactsView;
            lhsContactsView = this.getContactsView();
            ContactsViewType rhsContactsView;
            rhsContactsView = that.getContactsView();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contactsView", lhsContactsView), LocatorUtils.property(thatLocator, "contactsView", rhsContactsView), lhsContactsView, rhsContactsView)) {
                return false;
            }
        }
        {
            CalendarViewType lhsCalendarView;
            lhsCalendarView = this.getCalendarView();
            CalendarViewType rhsCalendarView;
            rhsCalendarView = that.getCalendarView();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "calendarView", lhsCalendarView), LocatorUtils.property(thatLocator, "calendarView", rhsCalendarView), lhsCalendarView, rhsCalendarView)) {
                return false;
            }
        }
        {
            FractionalPageViewType lhsFractionalPageItemView;
            lhsFractionalPageItemView = this.getFractionalPageItemView();
            FractionalPageViewType rhsFractionalPageItemView;
            rhsFractionalPageItemView = that.getFractionalPageItemView();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fractionalPageItemView", lhsFractionalPageItemView), LocatorUtils.property(thatLocator, "fractionalPageItemView", rhsFractionalPageItemView), lhsFractionalPageItemView, rhsFractionalPageItemView)) {
                return false;
            }
        }
        {
            IndexedPageViewType lhsIndexedPageItemView;
            lhsIndexedPageItemView = this.getIndexedPageItemView();
            IndexedPageViewType rhsIndexedPageItemView;
            rhsIndexedPageItemView = that.getIndexedPageItemView();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indexedPageItemView", lhsIndexedPageItemView), LocatorUtils.property(thatLocator, "indexedPageItemView", rhsIndexedPageItemView), lhsIndexedPageItemView, rhsIndexedPageItemView)) {
                return false;
            }
        }
        {
            DistinguishedGroupByType lhsDistinguishedGroupBy;
            lhsDistinguishedGroupBy = this.getDistinguishedGroupBy();
            DistinguishedGroupByType rhsDistinguishedGroupBy;
            rhsDistinguishedGroupBy = that.getDistinguishedGroupBy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "distinguishedGroupBy", lhsDistinguishedGroupBy), LocatorUtils.property(thatLocator, "distinguishedGroupBy", rhsDistinguishedGroupBy), lhsDistinguishedGroupBy, rhsDistinguishedGroupBy)) {
                return false;
            }
        }
        {
            GroupByType lhsGroupBy;
            lhsGroupBy = this.getGroupBy();
            GroupByType rhsGroupBy;
            rhsGroupBy = that.getGroupBy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "groupBy", lhsGroupBy), LocatorUtils.property(thatLocator, "groupBy", rhsGroupBy), lhsGroupBy, rhsGroupBy)) {
                return false;
            }
        }
        {
            RestrictionType lhsRestriction;
            lhsRestriction = this.getRestriction();
            RestrictionType rhsRestriction;
            rhsRestriction = that.getRestriction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "restriction", lhsRestriction), LocatorUtils.property(thatLocator, "restriction", rhsRestriction), lhsRestriction, rhsRestriction)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfFieldOrdersType lhsSortOrder;
            lhsSortOrder = this.getSortOrder();
            NonEmptyArrayOfFieldOrdersType rhsSortOrder;
            rhsSortOrder = that.getSortOrder();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sortOrder", lhsSortOrder), LocatorUtils.property(thatLocator, "sortOrder", rhsSortOrder), lhsSortOrder, rhsSortOrder)) {
                return false;
            }
        }
        {
            NonEmptyArrayOfBaseFolderIdsType lhsParentFolderIds;
            lhsParentFolderIds = this.getParentFolderIds();
            NonEmptyArrayOfBaseFolderIdsType rhsParentFolderIds;
            rhsParentFolderIds = that.getParentFolderIds();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "parentFolderIds", lhsParentFolderIds), LocatorUtils.property(thatLocator, "parentFolderIds", rhsParentFolderIds), lhsParentFolderIds, rhsParentFolderIds)) {
                return false;
            }
        }
        {
            ItemQueryTraversalType lhsTraversal;
            lhsTraversal = this.getTraversal();
            ItemQueryTraversalType rhsTraversal;
            rhsTraversal = that.getTraversal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "traversal", lhsTraversal), LocatorUtils.property(thatLocator, "traversal", rhsTraversal), lhsTraversal, rhsTraversal)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            ItemResponseShapeType theItemShape;
            theItemShape = this.getItemShape();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemShape", theItemShape), currentHashCode, theItemShape);
        }
        {
            ContactsViewType theContactsView;
            theContactsView = this.getContactsView();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contactsView", theContactsView), currentHashCode, theContactsView);
        }
        {
            CalendarViewType theCalendarView;
            theCalendarView = this.getCalendarView();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "calendarView", theCalendarView), currentHashCode, theCalendarView);
        }
        {
            FractionalPageViewType theFractionalPageItemView;
            theFractionalPageItemView = this.getFractionalPageItemView();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fractionalPageItemView", theFractionalPageItemView), currentHashCode, theFractionalPageItemView);
        }
        {
            IndexedPageViewType theIndexedPageItemView;
            theIndexedPageItemView = this.getIndexedPageItemView();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indexedPageItemView", theIndexedPageItemView), currentHashCode, theIndexedPageItemView);
        }
        {
            DistinguishedGroupByType theDistinguishedGroupBy;
            theDistinguishedGroupBy = this.getDistinguishedGroupBy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "distinguishedGroupBy", theDistinguishedGroupBy), currentHashCode, theDistinguishedGroupBy);
        }
        {
            GroupByType theGroupBy;
            theGroupBy = this.getGroupBy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "groupBy", theGroupBy), currentHashCode, theGroupBy);
        }
        {
            RestrictionType theRestriction;
            theRestriction = this.getRestriction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "restriction", theRestriction), currentHashCode, theRestriction);
        }
        {
            NonEmptyArrayOfFieldOrdersType theSortOrder;
            theSortOrder = this.getSortOrder();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sortOrder", theSortOrder), currentHashCode, theSortOrder);
        }
        {
            NonEmptyArrayOfBaseFolderIdsType theParentFolderIds;
            theParentFolderIds = this.getParentFolderIds();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "parentFolderIds", theParentFolderIds), currentHashCode, theParentFolderIds);
        }
        {
            ItemQueryTraversalType theTraversal;
            theTraversal = this.getTraversal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "traversal", theTraversal), currentHashCode, theTraversal);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
