//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.18 at 02:30:12 PM CEST 
//


package com.microsoft.exchange.messages;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.microsoft.exchange.types.AffectedTaskOccurrencesType;
import com.microsoft.exchange.types.CalendarItemCreateOrDeleteOperationType;
import com.microsoft.exchange.types.DisposalType;
import com.microsoft.exchange.types.NonEmptyArrayOfBaseItemIdsType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for DeleteItemType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DeleteItemType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/exchange/services/2006/messages}BaseRequestType">
 *       &lt;sequence>
 *         &lt;element name="ItemIds" type="{http://schemas.microsoft.com/exchange/services/2006/types}NonEmptyArrayOfBaseItemIdsType"/>
 *       &lt;/sequence>
 *       &lt;attribute name="DeleteType" use="required" type="{http://schemas.microsoft.com/exchange/services/2006/types}DisposalType" />
 *       &lt;attribute name="SendMeetingCancellations" type="{http://schemas.microsoft.com/exchange/services/2006/types}CalendarItemCreateOrDeleteOperationType" />
 *       &lt;attribute name="AffectedTaskOccurrences" type="{http://schemas.microsoft.com/exchange/services/2006/types}AffectedTaskOccurrencesType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DeleteItemType", propOrder = {
    "itemIds"
})
@XmlRootElement(name = "DeleteItem")
public class DeleteItem
    extends BaseRequestType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "ItemIds", required = true)
    protected NonEmptyArrayOfBaseItemIdsType itemIds;
    @XmlAttribute(name = "DeleteType", required = true)
    protected DisposalType deleteType;
    @XmlAttribute(name = "SendMeetingCancellations")
    protected CalendarItemCreateOrDeleteOperationType sendMeetingCancellations;
    @XmlAttribute(name = "AffectedTaskOccurrences")
    protected AffectedTaskOccurrencesType affectedTaskOccurrences;

    /**
     * Gets the value of the itemIds property.
     * 
     * @return
     *     possible object is
     *     {@link NonEmptyArrayOfBaseItemIdsType }
     *     
     */
    public NonEmptyArrayOfBaseItemIdsType getItemIds() {
        return itemIds;
    }

    /**
     * Sets the value of the itemIds property.
     * 
     * @param value
     *     allowed object is
     *     {@link NonEmptyArrayOfBaseItemIdsType }
     *     
     */
    public void setItemIds(NonEmptyArrayOfBaseItemIdsType value) {
        this.itemIds = value;
    }

    /**
     * Gets the value of the deleteType property.
     * 
     * @return
     *     possible object is
     *     {@link DisposalType }
     *     
     */
    public DisposalType getDeleteType() {
        return deleteType;
    }

    /**
     * Sets the value of the deleteType property.
     * 
     * @param value
     *     allowed object is
     *     {@link DisposalType }
     *     
     */
    public void setDeleteType(DisposalType value) {
        this.deleteType = value;
    }

    /**
     * Gets the value of the sendMeetingCancellations property.
     * 
     * @return
     *     possible object is
     *     {@link CalendarItemCreateOrDeleteOperationType }
     *     
     */
    public CalendarItemCreateOrDeleteOperationType getSendMeetingCancellations() {
        return sendMeetingCancellations;
    }

    /**
     * Sets the value of the sendMeetingCancellations property.
     * 
     * @param value
     *     allowed object is
     *     {@link CalendarItemCreateOrDeleteOperationType }
     *     
     */
    public void setSendMeetingCancellations(CalendarItemCreateOrDeleteOperationType value) {
        this.sendMeetingCancellations = value;
    }

    /**
     * Gets the value of the affectedTaskOccurrences property.
     * 
     * @return
     *     possible object is
     *     {@link AffectedTaskOccurrencesType }
     *     
     */
    public AffectedTaskOccurrencesType getAffectedTaskOccurrences() {
        return affectedTaskOccurrences;
    }

    /**
     * Sets the value of the affectedTaskOccurrences property.
     * 
     * @param value
     *     allowed object is
     *     {@link AffectedTaskOccurrencesType }
     *     
     */
    public void setAffectedTaskOccurrences(AffectedTaskOccurrencesType value) {
        this.affectedTaskOccurrences = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            NonEmptyArrayOfBaseItemIdsType theItemIds;
            theItemIds = this.getItemIds();
            strategy.appendField(locator, this, "itemIds", buffer, theItemIds);
        }
        {
            DisposalType theDeleteType;
            theDeleteType = this.getDeleteType();
            strategy.appendField(locator, this, "deleteType", buffer, theDeleteType);
        }
        {
            CalendarItemCreateOrDeleteOperationType theSendMeetingCancellations;
            theSendMeetingCancellations = this.getSendMeetingCancellations();
            strategy.appendField(locator, this, "sendMeetingCancellations", buffer, theSendMeetingCancellations);
        }
        {
            AffectedTaskOccurrencesType theAffectedTaskOccurrences;
            theAffectedTaskOccurrences = this.getAffectedTaskOccurrences();
            strategy.appendField(locator, this, "affectedTaskOccurrences", buffer, theAffectedTaskOccurrences);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DeleteItem)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DeleteItem that = ((DeleteItem) object);
        {
            NonEmptyArrayOfBaseItemIdsType lhsItemIds;
            lhsItemIds = this.getItemIds();
            NonEmptyArrayOfBaseItemIdsType rhsItemIds;
            rhsItemIds = that.getItemIds();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "itemIds", lhsItemIds), LocatorUtils.property(thatLocator, "itemIds", rhsItemIds), lhsItemIds, rhsItemIds)) {
                return false;
            }
        }
        {
            DisposalType lhsDeleteType;
            lhsDeleteType = this.getDeleteType();
            DisposalType rhsDeleteType;
            rhsDeleteType = that.getDeleteType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deleteType", lhsDeleteType), LocatorUtils.property(thatLocator, "deleteType", rhsDeleteType), lhsDeleteType, rhsDeleteType)) {
                return false;
            }
        }
        {
            CalendarItemCreateOrDeleteOperationType lhsSendMeetingCancellations;
            lhsSendMeetingCancellations = this.getSendMeetingCancellations();
            CalendarItemCreateOrDeleteOperationType rhsSendMeetingCancellations;
            rhsSendMeetingCancellations = that.getSendMeetingCancellations();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sendMeetingCancellations", lhsSendMeetingCancellations), LocatorUtils.property(thatLocator, "sendMeetingCancellations", rhsSendMeetingCancellations), lhsSendMeetingCancellations, rhsSendMeetingCancellations)) {
                return false;
            }
        }
        {
            AffectedTaskOccurrencesType lhsAffectedTaskOccurrences;
            lhsAffectedTaskOccurrences = this.getAffectedTaskOccurrences();
            AffectedTaskOccurrencesType rhsAffectedTaskOccurrences;
            rhsAffectedTaskOccurrences = that.getAffectedTaskOccurrences();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "affectedTaskOccurrences", lhsAffectedTaskOccurrences), LocatorUtils.property(thatLocator, "affectedTaskOccurrences", rhsAffectedTaskOccurrences), lhsAffectedTaskOccurrences, rhsAffectedTaskOccurrences)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            NonEmptyArrayOfBaseItemIdsType theItemIds;
            theItemIds = this.getItemIds();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "itemIds", theItemIds), currentHashCode, theItemIds);
        }
        {
            DisposalType theDeleteType;
            theDeleteType = this.getDeleteType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deleteType", theDeleteType), currentHashCode, theDeleteType);
        }
        {
            CalendarItemCreateOrDeleteOperationType theSendMeetingCancellations;
            theSendMeetingCancellations = this.getSendMeetingCancellations();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sendMeetingCancellations", theSendMeetingCancellations), currentHashCode, theSendMeetingCancellations);
        }
        {
            AffectedTaskOccurrencesType theAffectedTaskOccurrences;
            theAffectedTaskOccurrences = this.getAffectedTaskOccurrences();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "affectedTaskOccurrences", theAffectedTaskOccurrences), currentHashCode, theAffectedTaskOccurrences);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
