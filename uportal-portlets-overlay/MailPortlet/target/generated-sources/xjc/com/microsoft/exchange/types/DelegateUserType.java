//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.20 at 01:37:20 PM CEST 
//


package com.microsoft.exchange.types;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for DelegateUserType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DelegateUserType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="UserId" type="{http://schemas.microsoft.com/exchange/services/2006/types}UserIdType"/>
 *         &lt;element name="DelegatePermissions" type="{http://schemas.microsoft.com/exchange/services/2006/types}DelegatePermissionsType" minOccurs="0"/>
 *         &lt;element name="ReceiveCopiesOfMeetingMessages" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *         &lt;element name="ViewPrivateItems" type="{http://www.w3.org/2001/XMLSchema}boolean" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DelegateUserType", propOrder = {
    "userId",
    "delegatePermissions",
    "receiveCopiesOfMeetingMessages",
    "viewPrivateItems"
})
public class DelegateUserType
    implements Equals, HashCode, ToString
{

    @XmlElement(name = "UserId", required = true)
    protected UserIdType userId;
    @XmlElement(name = "DelegatePermissions")
    protected DelegatePermissionsType delegatePermissions;
    @XmlElement(name = "ReceiveCopiesOfMeetingMessages")
    protected Boolean receiveCopiesOfMeetingMessages;
    @XmlElement(name = "ViewPrivateItems")
    protected Boolean viewPrivateItems;

    /**
     * Gets the value of the userId property.
     * 
     * @return
     *     possible object is
     *     {@link UserIdType }
     *     
     */
    public UserIdType getUserId() {
        return userId;
    }

    /**
     * Sets the value of the userId property.
     * 
     * @param value
     *     allowed object is
     *     {@link UserIdType }
     *     
     */
    public void setUserId(UserIdType value) {
        this.userId = value;
    }

    /**
     * Gets the value of the delegatePermissions property.
     * 
     * @return
     *     possible object is
     *     {@link DelegatePermissionsType }
     *     
     */
    public DelegatePermissionsType getDelegatePermissions() {
        return delegatePermissions;
    }

    /**
     * Sets the value of the delegatePermissions property.
     * 
     * @param value
     *     allowed object is
     *     {@link DelegatePermissionsType }
     *     
     */
    public void setDelegatePermissions(DelegatePermissionsType value) {
        this.delegatePermissions = value;
    }

    /**
     * Gets the value of the receiveCopiesOfMeetingMessages property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isReceiveCopiesOfMeetingMessages() {
        return receiveCopiesOfMeetingMessages;
    }

    /**
     * Sets the value of the receiveCopiesOfMeetingMessages property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setReceiveCopiesOfMeetingMessages(Boolean value) {
        this.receiveCopiesOfMeetingMessages = value;
    }

    /**
     * Gets the value of the viewPrivateItems property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isViewPrivateItems() {
        return viewPrivateItems;
    }

    /**
     * Sets the value of the viewPrivateItems property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setViewPrivateItems(Boolean value) {
        this.viewPrivateItems = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            UserIdType theUserId;
            theUserId = this.getUserId();
            strategy.appendField(locator, this, "userId", buffer, theUserId);
        }
        {
            DelegatePermissionsType theDelegatePermissions;
            theDelegatePermissions = this.getDelegatePermissions();
            strategy.appendField(locator, this, "delegatePermissions", buffer, theDelegatePermissions);
        }
        {
            Boolean theReceiveCopiesOfMeetingMessages;
            theReceiveCopiesOfMeetingMessages = this.isReceiveCopiesOfMeetingMessages();
            strategy.appendField(locator, this, "receiveCopiesOfMeetingMessages", buffer, theReceiveCopiesOfMeetingMessages);
        }
        {
            Boolean theViewPrivateItems;
            theViewPrivateItems = this.isViewPrivateItems();
            strategy.appendField(locator, this, "viewPrivateItems", buffer, theViewPrivateItems);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DelegateUserType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final DelegateUserType that = ((DelegateUserType) object);
        {
            UserIdType lhsUserId;
            lhsUserId = this.getUserId();
            UserIdType rhsUserId;
            rhsUserId = that.getUserId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userId", lhsUserId), LocatorUtils.property(thatLocator, "userId", rhsUserId), lhsUserId, rhsUserId)) {
                return false;
            }
        }
        {
            DelegatePermissionsType lhsDelegatePermissions;
            lhsDelegatePermissions = this.getDelegatePermissions();
            DelegatePermissionsType rhsDelegatePermissions;
            rhsDelegatePermissions = that.getDelegatePermissions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "delegatePermissions", lhsDelegatePermissions), LocatorUtils.property(thatLocator, "delegatePermissions", rhsDelegatePermissions), lhsDelegatePermissions, rhsDelegatePermissions)) {
                return false;
            }
        }
        {
            Boolean lhsReceiveCopiesOfMeetingMessages;
            lhsReceiveCopiesOfMeetingMessages = this.isReceiveCopiesOfMeetingMessages();
            Boolean rhsReceiveCopiesOfMeetingMessages;
            rhsReceiveCopiesOfMeetingMessages = that.isReceiveCopiesOfMeetingMessages();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "receiveCopiesOfMeetingMessages", lhsReceiveCopiesOfMeetingMessages), LocatorUtils.property(thatLocator, "receiveCopiesOfMeetingMessages", rhsReceiveCopiesOfMeetingMessages), lhsReceiveCopiesOfMeetingMessages, rhsReceiveCopiesOfMeetingMessages)) {
                return false;
            }
        }
        {
            Boolean lhsViewPrivateItems;
            lhsViewPrivateItems = this.isViewPrivateItems();
            Boolean rhsViewPrivateItems;
            rhsViewPrivateItems = that.isViewPrivateItems();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "viewPrivateItems", lhsViewPrivateItems), LocatorUtils.property(thatLocator, "viewPrivateItems", rhsViewPrivateItems), lhsViewPrivateItems, rhsViewPrivateItems)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            UserIdType theUserId;
            theUserId = this.getUserId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userId", theUserId), currentHashCode, theUserId);
        }
        {
            DelegatePermissionsType theDelegatePermissions;
            theDelegatePermissions = this.getDelegatePermissions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "delegatePermissions", theDelegatePermissions), currentHashCode, theDelegatePermissions);
        }
        {
            Boolean theReceiveCopiesOfMeetingMessages;
            theReceiveCopiesOfMeetingMessages = this.isReceiveCopiesOfMeetingMessages();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "receiveCopiesOfMeetingMessages", theReceiveCopiesOfMeetingMessages), currentHashCode, theReceiveCopiesOfMeetingMessages);
        }
        {
            Boolean theViewPrivateItems;
            theViewPrivateItems = this.isViewPrivateItems();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "viewPrivateItems", theViewPrivateItems), currentHashCode, theViewPrivateItems);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
